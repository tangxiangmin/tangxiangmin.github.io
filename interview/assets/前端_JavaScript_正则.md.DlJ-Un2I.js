import{_ as s,c as a,o as i,a2 as e}from"./chunks/framework.DLPB9-dE.js";const g=JSON.parse('{"title":"正则表达式","description":"","frontmatter":{},"headers":[],"relativePath":"前端/JavaScript/正则.md","filePath":"前端/JavaScript/正则.md","lastUpdated":1620234346000}'),l={name:"前端/JavaScript/正则.md"},n=e(`<h1 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;正则表达式&quot;">​</a></h1><blockquote><p>问题：正则表达式的使用</p></blockquote><p>关于正则表达式，之前阅读了《正则指引》，并进行了相关的<a href="https://www.shymean.com/article/%E3%80%8A%E6%AD%A3%E5%88%99%E6%8C%87%E5%BC%95%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0" target="_blank" rel="noreferrer">整理</a>，下面是简单的总结回顾。</p><h2 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h2><h3 id="字符组" tabindex="-1">字符组 <a class="header-anchor" href="#字符组" aria-label="Permalink to &quot;字符组&quot;">​</a></h3><p>字符组<code>[]</code>中括号包围的字符集合，表示“在<strong>同一个位置</strong>可能出现的各种字符“</p><ul><li>字符组中多个连续字符可以使用<code>-</code>范围表示法，根据字符的ASCII编码，编码小的字符在前，编码大的字符在后</li><li>正则表达式所使用的一些字符，比如^,$,-等，需要通过转义符<code>\\</code>转义才可以使用</li><li>排除行字符组<code>[^]</code>，表示&quot;<strong>在当前位置</strong>，匹配一个没有列出的字符&quot;</li><li><code>\\d</code>数字(digit) 和 <code>\\D</code>非数字，<code>\\w</code>字符(word) 和 <code>\\W</code>非字符，<code>\\s</code>空白(space) 和 <code>\\S</code>非空白符</li><li><code>.</code>通配符可以用来匹配除换行符外的全部字符，如果需要匹配真正的全部字符，可以使用<code>[\\w\\W]</code>或<code>[^]</code></li></ul><h3 id="量词" tabindex="-1">量词 <a class="header-anchor" href="#量词" aria-label="Permalink to &quot;量词&quot;">​</a></h3><p>量词则用来匹配多个字符，使用<code>{m,n}</code>来表示某个数量范围内的量词，此外还有一些简写形式</p><ul><li><code>+</code>表示{1,}一个或多个</li><li><code>*</code>表示{0,}0个或多个</li><li><code>?</code>表示{0,1}0个或一个</li></ul><p>通用字符<code>.</code>与量词组合就可以匹配任意长度的字符，这里需要区分贪婪匹配和非贪婪匹配</p><ul><li><code>.*</code>属于贪婪匹配，贪婪匹配会尽可能的匹配较多的符合<code>.</code>的字符（遇见换行符或者字符串结束）为止，然后根据正则表达式中的下一个字符（如果存在），从匹配到的结果中从后向前回溯，直至遇见第一个字符为止</li><li><code>.*?</code>属于非贪婪匹配，其原理是每遇见一个<code>.</code>能匹配的字符就优先进行忽略，并直接匹配?后面的那个字符，如果匹配不成功则将前面的字符记录并尝试匹配下一个字符，如果在某次对?后面的那个字符匹配成功之后，则直接返回记录的字符串</li></ul><h3 id="表达式" tabindex="-1">表达式 <a class="header-anchor" href="#表达式" aria-label="Permalink to &quot;表达式&quot;">​</a></h3><p>使用<code>()</code>来定义一个表达式，通常被称为正则表达式的子表达式，子表达式作为一个整体参与匹配。</p><ul><li>可以在括号内以<code>|</code>竖线分隔开多个子表达式</li><li>使用括号之后，正则表达式会保存每个分组真正匹配的文本，这种功能被称为<strong>捕获分组</strong>，在拿到匹配结果后，可以通过分组的编号来获取捕获内容， <ul><li>分组的编号都是根据开括号从左向右出现的顺序来计数的</li><li>如果不需要获取相应的子表达式，为了提高性能，可以显式地声明<strong>非捕获分组</strong>。 非捕获分组使用<code>(?:)</code>来进行声明</li></ul></li><li>在正则表达式匹配过程中也可以获得某个表达式匹配的文本，这种功能被称为<strong>反向引用</strong>，通过<code>\\num</code>来表示一个反向引用，num为分组的编号</li></ul><h3 id="断言" tabindex="-1">断言 <a class="header-anchor" href="#断言" aria-label="Permalink to &quot;断言&quot;">​</a></h3><p>正则表达式中的大多数结构匹配的文本都会出现在最终的匹配结果中，但是有些结果只是用来判断某个位置左/右侧的文本是否符合要求</p><ul><li>单词边界<code>\\b</code>表示希望匹配具体单词（由空格分隔）而非某个子字符串</li><li>起始锚点<code>^</code>和结束锚点<code>$</code>，用来表示字符串的开始位置和结束位置</li></ul><h3 id="环视" tabindex="-1">环视 <a class="header-anchor" href="#环视" aria-label="Permalink to &quot;环视&quot;">​</a></h3><p>有时候需要在某个位置向左或者向右看，要求必须出现或者不能出现某些字符，这种功能被称为<strong>向前/向后断言</strong></p><ul><li><code>(?!)</code>就是“向后否定断言”，这个子表达式表示当前位置之后，不允许存在这个子表达式能够匹配的字符，从而限定这个匹配前面的字符或分组</li><li><code>(?=)</code>就是“向后肯定断言”，用于限定当前位置之后必须这个匹配指定的子表达式</li></ul><p>在过去的JavaScript中，并不支持向前断言，所幸的是在<code>ES2018</code>中，已经开始支持向前断言了，详情可以阅读下面的<a href="#ES2018新增的正则特性">ES2018新增的正则特性</a></p><h3 id="模式匹配" tabindex="-1">模式匹配 <a class="header-anchor" href="#模式匹配" aria-label="Permalink to &quot;模式匹配&quot;">​</a></h3><p>匹配模式是指匹配时使用的规则，设定特定的规则，可能会改变对正则表达式的识别</p><ul><li>不区分大小写模式对应的模式修饰符是<code>i</code></li><li>单行模式对应的模式修饰符是<code>s</code>，主要用来改变.的匹配规则</li><li>单行模式对应的模式修饰符是<code>m</code>，多行模式影响的是^和$的匹配规则</li></ul><h2 id="es2018新增的正则特性" tabindex="-1">ES2018新增的正则特性 <a class="header-anchor" href="#es2018新增的正则特性" aria-label="Permalink to &quot;ES2018新增的正则特性&quot;">​</a></h2><p>参考</p><ul><li><a href="https://www.smashingmagazine.com/2019/02/regexp-features-regular-expressions/" target="_blank" rel="noreferrer">https://www.smashingmagazine.com/2019/02/regexp-features-regular-expressions/</a></li><li><a href="https://juejin.im/post/5c6a033e6fb9a04a0c2efdd7" target="_blank" rel="noreferrer">https://juejin.im/post/5c6a033e6fb9a04a0c2efdd7</a></li></ul><h3 id="支持后行断言" tabindex="-1">支持后行断言 <a class="header-anchor" href="#支持后行断言" aria-label="Permalink to &quot;支持后行断言&quot;">​</a></h3><p>在此之前JavaScript只支持先行断言，即向后匹配</p><ul><li><code>(?=xxx)</code>，匹配后面包含xxx字符串</li><li><code>(?!xxx)</code>，匹配后面不包含xxx字符串</li></ul><p>ES2018中增加了后行判断，即向前匹配</p><ul><li><code>(?&lt;=xxx)</code>，匹配前面包含xxx字符串</li><li><code>(?&lt;!xxx)</code>，匹配前面不包含xxx字符串</li></ul><p>在之前的版本会报错</p><blockquote><p>Invalid regular expression: /(?&lt;=€)\\d+(.\\d*)?/: Invalid group</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 匹配前面包含两个数字，且数字不为14的 \` cases\`字符串</span></span>
<span class="line"><span>const re = /(?&lt;=\\d{2})(?&lt;!14) cases/;</span></span>
<span class="line"><span>console.log(re.exec(&quot;20 cases&quot;)); // [&quot; cases&quot;, index: 2, input: &quot;20 cases&quot;, groups: undefined]</span></span>
<span class="line"><span>console.log(re.exec(&quot;14 cases&quot;)); // null</span></span></code></pre></div><h3 id="捕获命名" tabindex="-1">捕获命名 <a class="header-anchor" href="#捕获命名" aria-label="Permalink to &quot;捕获命名&quot;">​</a></h3><p>之前只能通过数字标获取分组的引用，现在支持命名和按名称引用</p><ul><li><code>(?&lt;name&gt;)</code>可以给捕获分组进行命名了，</li><li><code>\\k&lt;name&gt;</code>获取之前捕获的命名分组</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> re</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">year</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{4}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)-(?&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">month</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{2}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)-(?&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">day</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{2}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> match </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2020-03-04&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果为</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     0: &quot;2020-03-04&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     1: &quot;2020&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     2: &quot;03&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     3: &quot;04&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     groups:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//          day: &quot;04&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//          month: &quot;03&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//          year: &quot;2020&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     index: 0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     input: &quot;2020-03-04&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// }</span></span></code></pre></div><h3 id="新增模式-s" tabindex="-1">新增模式\\s <a class="header-anchor" href="#新增模式-s" aria-label="Permalink to &quot;新增模式\\s&quot;">​</a></h3><p>在该模式下 <code>.</code>可以匹配包括换行符的任何字符了，等价于之前的[\\w\\W]</p><h3 id="unicode匹配模式增强" tabindex="-1">Unicode匹配模式增强 <a class="header-anchor" href="#unicode匹配模式增强" aria-label="Permalink to &quot;Unicode匹配模式增强&quot;">​</a></h3><p>u 修饰符可以识别所有大于 0xFFFF 的 Unicode 字符。</p><ul><li><code>\\p{Number}</code> 匹配所有数字，包括<code>㉛㉜㉝</code>、<code>ⅠⅡⅢⅣ</code>等</li><li><code>\\p{Alphabetic}</code>可以匹配所有Alphabetic，包括汉字、字母等</li></ul>`,45),t=[n];function o(d,h,p,c,r,k){return i(),a("div",null,t)}const E=s(l,[["render",o]]);export{g as __pageData,E as default};
