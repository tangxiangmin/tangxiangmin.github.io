import{_ as s,c as i,o as a,a2 as l}from"./chunks/framework.DLPB9-dE.js";const g=JSON.parse('{"title":"Babel","description":"","frontmatter":{},"headers":[],"relativePath":"前端/前端工程化/Babel.md","filePath":"前端/前端工程化/Babel.md","lastUpdated":1709648798000}'),e={name:"前端/前端工程化/Babel.md"},n=l(`<h1 id="babel" tabindex="-1">Babel <a class="header-anchor" href="#babel" aria-label="Permalink to &quot;Babel&quot;">​</a></h1><p><a href="https://babeljs.io/docs/en/7.0.0/" target="_blank" rel="noreferrer">Babel</a> 是一个通用的多功能 JavaScript 编译器，但与一般编译器不同的是它只是把同种语言的高版本规则转换为低版本规则，而不是输出另一种低级机器可识别的代码，并且在依赖不同的拓展插件下可用于不同形式的静态分析。</p><p>由于浏览器对于JavaScript新语法的支持总是滞后的，使用babel可以让我们快速使用新语法编写代码，且无需考虑浏览器兼容性的问题。</p><h2 id="babel原理" tabindex="-1">Babel原理 <a class="header-anchor" href="#babel原理" aria-label="Permalink to &quot;Babel原理&quot;">​</a></h2><p>参考</p><ul><li><a href="https://segmentfault.com/a/1190000019578478" target="_blank" rel="noreferrer">初学 Babel 工作原理</a></li><li><a href="https://segmentfault.com/a/1190000016359110" target="_blank" rel="noreferrer">Babel 插件原理的理解与深入</a></li><li><a href="https://zhuanlan.zhihu.com/p/27289600" target="_blank" rel="noreferrer">Babel是如何读懂JS代码的</a></li><li><a href="https://zhuanlan.zhihu.com/p/43249121" target="_blank" rel="noreferrer">一口（很长的）气了解 babel</a></li></ul><p>与编译器类似，babel转译过程也分为下面三个阶段</p><ul><li>解析 Parse，通过 <a href="https://babeljs.io/docs/en/7.0.0/babylon" target="_blank" rel="noreferrer"><code>babylon</code></a> 将代码解析生成抽象语法树( 即AST )</li><li>转换 Transform，接收AST并通过<code>babel-traverse</code>遍历AST，在此过程中进行添加、更新和移除等操作，大部分插件都是专注于该阶段的工作</li><li>生成 Generate，通过<code>babel-generator</code>将转换后的AST再重新生成JS代码</li></ul><p><code>babel-core</code>模块则是将三者结合使得对外提供的API做了一个简化。需要注意的是babel仅仅是转译新标准引入的语法，如箭头函数、class语法等，而新标准引入的原生对象、接口等，则需要使用<code>polyfill</code>实现。</p><h2 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to &quot;使用方法&quot;">​</a></h2><p>常见做法是设置一个根目录下的 <a href="https://babeljs.io/docs/en/config-files#file-relative-configuration" target="_blank" rel="noreferrer"><code>.babelrc</code></a> 文件，用来设置转码规则和插件，其基本格式如下</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;presets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="plugins插件" tabindex="-1">plugins插件 <a class="header-anchor" href="#plugins插件" aria-label="Permalink to &quot;plugins插件&quot;">​</a></h3><p>通过<code>plugins</code>字段表示，要加载和使用的插件，插件名前的babel-plugin-可省略；plugin列表按从头到尾的顺序运行。</p><p>配置不同的插件，告诉babel我们的代码中有哪些是需要转译的，常用的插件如<code>transform-runtime</code>，该插件能自动为项目引入polyfill和helpers</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;transform-runtime&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;helpers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//自动引入helpers</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;polyfill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//自动引入polyfill（core-js提供的polyfill）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;regenerator&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//自动引入regenerator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>就其<code>polyfill</code>与手动引入<code>babel-polyfill</code>相比</p><ul><li><code>transform-runtime</code>是按需引入，需要用到哪些polyfill，runtime就自动帮你引入哪些，多个模块使用相同的polyfill，可能会造成重复引入</li><li><code>babel-polyfill</code>的引入是全局的，基本能满足所有新接口的polyfill。在小项目中可能会造成体积过大等问题</li><li>一般地使用原则是：开发框架和库时为了避免污染全局polyfill，建议使用<code>transform-runtime</code>；开发大型web应用时，建议使用<code>babel-polyfill</code></li></ul><h3 id="presets预设" tabindex="-1">presets预设 <a class="header-anchor" href="#presets预设" aria-label="Permalink to &quot;presets预设&quot;">​</a></h3><p>通过<code>presets</code>表示要加载和使用的preset ，每个 preset 表示一个预设插件列表，preset名前的babel-preset-可省略；presets列表的preset按从尾到头的逆序运行。</p><p>目前官方推荐的使用preset为<code>babel-preset-env</code>，它能灵活决定加载哪些插件和polyfill，相当于CSS的<code>Autoprefixer</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;presets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;targets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//指定要转译到哪个环境</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                //浏览器环境</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;browsers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;last 2 versions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;safari &gt;= 7&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                //node环境</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;6.10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&quot;current&quot;  使用当前版本的node</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             //是否将ES6的模块化语法转译成其他类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             //参数：&quot;amd&quot; | &quot;umd&quot; | &quot;systemjs&quot; | &quot;commonjs&quot; | false，默认为&#39;commonjs&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;modules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;commonjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //是否进行debug操作，会在控制台打印出所有插件中的log，已经插件的版本</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;debug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //强制开启某些模块，默认为[]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;include&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;transform-es2015-arrow-functions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //禁用某些模块，默认为[]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;exclude&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;transform-es2015-for-of&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //是否自动引入polyfill，开启此选项必须保证已经安装了babel-polyfill</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //参数：Boolean，默认为false.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;useBuiltIns&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果不采用 presets 完全可以单独引用某个功能。如果同时设置了presets和plugins，那么plugins的先运行；每个preset和plugin都可以再配置自己的option</p><h3 id="执行顺序" tabindex="-1">执行顺序 <a class="header-anchor" href="#执行顺序" aria-label="Permalink to &quot;执行顺序&quot;">​</a></h3><p>前面提到，可以同时使用多个 Plugin 和 Preset，此时，它们的执行顺序非常重要。</p><ul><li>先执行完所有 Plugin，再执行 Preset。</li><li>多个 Plugin，按照声明顺序依次执行。</li><li>多个 Preset，按照声明顺序逆序执行。</li></ul>`,26),t=[n];function p(h,k,r,o,E,d){return a(),i("div",null,t)}const u=s(e,[["render",p]]);export{g as __pageData,u as default};
