import{_ as s,c as a,o as i,a2 as l}from"./chunks/framework.DLPB9-dE.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"后端/MySQL.md","filePath":"后端/MySQL.md","lastUpdated":1683863238000}'),n={name:"后端/MySQL.md"},e=l(`<h2 id="相关概念" tabindex="-1">相关概念 <a class="header-anchor" href="#相关概念" aria-label="Permalink to &quot;相关概念&quot;">​</a></h2><p>数据库最主要的用途就是用来存储数据和使用(读取)数据。如何用正确的姿势使用数据库呢？</p><p>Mysql是一种关系型数据库，以及所支持的存储引擎。</p><ul><li>InnoDB是一个可靠的事物处理引擎，但是不支持全文本搜索</li><li>MyISAM是一个性能极高的引擎，他支持全文不搜索但是不支持事物</li></ul><p>这里有两个概念：</p><ul><li>事物：用来保证批处理的数据要么全部成功执行，要么全部不成功（即在操作中出现错误时，会回复到没有进行操作之前的状态），保证表中数据的完整性</li><li>全文本搜索：主要用来解决LIKE搜索的限制</li></ul><p>以及服务器，数据库和数据表之间所使用的字符集，编码以及校对：</p><ul><li>字符：字母和符号的集合</li><li>编码：某个字符集成员的内部表示</li><li>校对：为规定字符如何进行比较的指令（排序）</li></ul><h3 id="创建流程" tabindex="-1">创建流程 <a class="header-anchor" href="#创建流程" aria-label="Permalink to &quot;创建流程&quot;">​</a></h3><p>首先需要创建一个数据库，然后再数据库中创建需要的表。一般情况下会统一同一个数据库中的表前缀（便于识别且防止不同数据库下的表名重复导致混淆）。</p><p>创建表是非常重要的起点，应当尽力避免在后续的操作中重新更改表的结构，明智地规划不同表的用途和一张表的字段是一件十分困难的事情。</p><h3 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h3><p>选择合适的数据类型，最主要的目的是为了用较小的存储代价换来较高的数据库性能。此外，临时更改字段的数据类型可能会造成数据的丢失。MySQL主要支持的数据类型包括：</p><ul><li>串</li><li>数值</li><li>日期</li><li>二进制</li></ul><h3 id="主键-空-默认值" tabindex="-1">主键/空/默认值 <a class="header-anchor" href="#主键-空-默认值" aria-label="Permalink to &quot;主键/空/默认值&quot;">​</a></h3><p>NULL表示没有值或者缺值，实际上为了性能一般都会为字段定义NOT NULL。</p><p>主键是用来区别表中每个行的字段，这就要求主键的值必须惟一（多个主键则要求他们的组合值必须惟一），一般使用自增来保证主键的值AUTO_INCREMENT。注意主键只能为NOT NULL的字段。</p><p>如果为字段定义了非空，则在更新或者插入数据时就必须为该字段传值，为了解决这个问题，可以在定义字段时设置默认值，<strong>MySQL不支持使用函数作为默认值</strong>，（注意空字符串和NULL是完全不同的概念，&#39;&#39;是一个有效的值）。</p><h2 id="crud" tabindex="-1">CRUD <a class="header-anchor" href="#crud" aria-label="Permalink to &quot;CRUD&quot;">​</a></h2><p>使用数据库主要就是围绕增删查改而来的。</p><h3 id="查询" tabindex="-1">查询 <a class="header-anchor" href="#查询" aria-label="Permalink to &quot;查询&quot;">​</a></h3><p>SELECT 是数据库中最重要的操作！我们将数据放在数据库中，并在需要的时候通过某种方式查询得到正确的数据.</p><ul><li>普通查询</li><li>整理结果</li><li>子查询</li><li>联结</li><li>组合</li></ul><p>详情语法如下：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 字段列表 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名 [where 条件] [order by 字段 asc|desc] [limit 起始位置，长度] [group by 字段名称（分组）]</span></span></code></pre></div><ul><li>查询部分字段</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 多个字段使用逗号分隔</span></span>
<span class="line"><span>select id,stuName from stu;</span></span>
<span class="line"><span># 使用as为字段新增别名</span></span>
<span class="line"><span>select stuName as name from txm_test;</span></span></code></pre></div><ul><li>order by 排序 ：asc升序，desc降序</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>select * from stu order by id desc;</span></span></code></pre></div><ul><li>截取</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 索引值是从0开始的</span></span>
<span class="line"><span>select * from stu limit 1,3;</span></span></code></pre></div><ul><li>分组</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 显示的是每个组的一条数据记录</span></span>
<span class="line"><span>select * from stu group by stuSex;</span></span></code></pre></div><ul><li>where条件 <ul><li>比较符号 &gt; &lt; &gt;= &lt;= = &lt;&gt;（不等于）</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>select * from stu where stuSex = 1;</span></span></code></pre></div><ul><li>逻辑运算 and or</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>select * from stu where id &gt; 1 and id &lt; 3;</span></span></code></pre></div><ul><li>模糊搜索：字符串中含有某个关键词，就能找到</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># %占位符表示0个或多个字符，_表示1个字符</span></span>
<span class="line"><span>select * from stu where stuName like &#39;%ta%&#39;;</span></span>
<span class="line"><span># between ... and ...连续区间</span></span>
<span class="line"><span># in 不连续范围，相当于连续使用or</span></span></code></pre></div></li></ul><h3 id="增加" tabindex="-1">增加 <a class="header-anchor" href="#增加" aria-label="Permalink to &quot;增加&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [into] 表名 [(列名...)] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (值...);</span></span></code></pre></div><h3 id="删除" tabindex="-1">删除 <a class="header-anchor" href="#删除" aria-label="Permalink to &quot;删除&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名称 [where 删除条件];</span></span></code></pre></div><h3 id="修改" tabindex="-1">修改 <a class="header-anchor" href="#修改" aria-label="Permalink to &quot;修改&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名称 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 列名称</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">新值 [where 更新条件];</span></span></code></pre></div><h2 id="常见情形与对应语句" tabindex="-1">常见情形与对应语句 <a class="header-anchor" href="#常见情形与对应语句" aria-label="Permalink to &quot;常见情形与对应语句&quot;">​</a></h2><h3 id="分组" tabindex="-1">分组 <a class="header-anchor" href="#分组" aria-label="Permalink to &quot;分组&quot;">​</a></h3><p>可以使用聚合函数返回某个供应商提供的产品数目，如果需要返回每个供应商的产品数目，则需要使用分组。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vend_id, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> products </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vend_id</span></span></code></pre></div><p>但是：分组并不是用来返回二维数组的，mysql也并不能实现这样的功能。换个角度看，某个分组内部各行应该具有某些共同点才行，这个共同点就是有GROUP BY指定的，如果group子句的字段都不相同，则肯定会划分到不同的分组中去，造成一些困惑。</p><p>针对分组一个常见的需求是：返回每个分组包含的行， 有一个折中的办法就是使用<code>GROUP_CONCAT</code>函数。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GROUP_CONCAT(prod_id), GROUP_CONCAT(prod_name) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> products </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vend_id;</span></span></code></pre></div><p>使用分组的一个明显标志就是：如果与聚集函数一起使用列或表达式，则必须使用分组</p><h3 id="子查询" tabindex="-1">子查询 <a class="header-anchor" href="#子查询" aria-label="Permalink to &quot;子查询&quot;">​</a></h3><p>如果某次查询的条件依赖于另外的查询结果，则可以使用子查询，如：筛选购买了某件商品的所有顾客</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cust_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> orders </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order_num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">IN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order_num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> orderitems </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prod_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;TNT2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>子查询的嵌套并没有限制，如果还需要根据cust_id查询对应顾客的详细信息，则可以将上面这条语句的查询结果再次作为从customer表中查询的筛选条件。</p><p>子查询的另外一个用处是计算字段，如：查询customers表中每个顾客的订单，订单保存在ordesr表中（尽管这种情况更合适的做法是使用联结）</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cust_id, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> orders </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customers.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`cust_id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> orders.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`cust_id\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> orders </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customers;</span></span></code></pre></div><h3 id="联表" tabindex="-1">联表 <a class="header-anchor" href="#联表" aria-label="Permalink to &quot;联表&quot;">​</a></h3><p>把数据拆分在不同的表中很有必要，表之间通过外键相连。比如要查询供应商和供应商对应的产品</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>SELECT	vend_name, prod_name, prod_price FROM vendors, products WHERE vendors.\`vend_id\` = products.\`vend_id\`;</span></span></code></pre></div><p>实际上联结更标准的写法是</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>SELECT	vend_name, prod_name, prod_price FROM vendors INNER JOIN  products ON vendors.\`vend_id\` = products.\`vend_id\`;</span></span></code></pre></div><h2 id="选择合适的数据类型" tabindex="-1">选择合适的数据类型 <a class="header-anchor" href="#选择合适的数据类型" aria-label="Permalink to &quot;选择合适的数据类型&quot;">​</a></h2><p>参考: <a href="http://jingyan.baidu.com/article/f0062228d2e4a8fbd3f0c8a6.html" target="_blank" rel="noreferrer">MySql 数据类型</a></p><p>主要目的：用较小的存储代价换来较高的数据库性能。</p><ul><li>整形 <ul><li>tinyint 1字节</li><li>smallint 2字节</li><li>int 4字节</li><li>BIGINT 8字节</li></ul></li><li>浮点型 <ul><li>float 4字节</li><li>double 4字节</li><li>DECIMA[m,d] 精度小数 m 总位数 d 小数点右边的位数</li></ul></li><li>字符串 <ul><li>char(位数) 定常字符</li><li>varchar(位数) 变长字符</li><li>text 65532个字符</li><li>MEDIUMBLOB 2^24个字符</li><li>enum(&#39;1&#39;[,&#39;2&#39;]) 枚举</li></ul></li><li>日期 <ul><li>date 日期</li><li>time 时间</li><li>datetime 日期时间</li></ul></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>create table stu(</span></span>
<span class="line"><span>    id int(6) auto_increment primary key,</span></span>
<span class="line"><span>    stuNUm varchar(6),</span></span>
<span class="line"><span>    stuName varchar(20),</span></span>
<span class="line"><span>    stuAge tinyint(2),</span></span>
<span class="line"><span>    stuSex enum(&quot;1&quot;,&quot;2&quot;),</span></span>
<span class="line"><span>    stuTel varchar(20)</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>desc stu;</span></span></code></pre></div><h3 id="数字类型" tabindex="-1">数字类型 <a class="header-anchor" href="#数字类型" aria-label="Permalink to &quot;数字类型&quot;">​</a></h3><p>数字类型分为三类：整数类、小数类和数字类</p><p>数字类</p><p>所谓的“数字类”，就是指 DECIMAL 和 NUMERIC，它们是同一种类型。它严格的说不是一种数字类型，因为他们实际上是将数字以字符串形式保存的;他的值的每一位 (包括小数点) 占一个字节的存储空间，因此这种类型耗费空间比较大。 但是它的一个突出的优点是小数的位数固定，在运算中不会“失真”，所以比较适合用于“价格”、“金额”这样对精度要求不高但准确度要求非常高的字段。</p><p>小数类</p><p>小数类，即浮点数类型，根据精度的不同，有 FLOAT 和 DOUBLE 两种。它们的优势是精确度，FLOAT 可以表示绝对值非常小、小到约 1.17E-38 (0.000...0117，小数点后面有 37 个零) 的小数，而 DOUBLE 更是可以表示绝对值小到约 2.22E-308 (0.000...0222，小数点后面有 307 个零) 的小数。FLOAT 类型和 DOUBLE 类型占用存储空间分别是 4 字节和 8 字节。如果需要用到小数的字段，精度要求不高的，当然用 FLOAT 了。可是说句实在话，我们“民用”的数据，哪有要求精度那么高的</p><p>整数类</p><p>用的最多的，最值得精打细算的，是整数类型。从只占一个字节存储空间的 TINYINT 到占 8 个字节的 BIGINT，挑选一个“够用”并且占用存储空间最小的类型是设计数据库时应该考虑的。TINYINT、SMALLINT、MEDIUMINT、INT 和 BIGINT 占用存储空间分别为 1 字节、2 字节、3 字节、4 字节和 8 字节，就无符号的整数而言，这些类型能表示的最大整数分别为 255、65535、16777215、4294967295 和 18446744073709551615。如果用来保存用户的年龄 (举例来说，数据库中保存年龄是不可取的)，用 TINYINT 就够了</p><h3 id="日期时间类型" tabindex="-1">日期时间类型 <a class="header-anchor" href="#日期时间类型" aria-label="Permalink to &quot;日期时间类型&quot;">​</a></h3><p>日期和时间类型比较简单，无非是 DATE、TIME、DATETIME、TIMESTAMP 和 YEAR 等几个类型。只对日期敏感，而对时间没有要求的字段，就用 DATE 而不用 DATETIME 是不用说的了;单独使用时间的情况也时有发生――使用 TIME;但最多用到的还是用 DATETIME。在日期时间类型上没有什么文章可做，这里就不再详述。</p><h3 id="字符-串-类型" tabindex="-1">字符 (串) 类型 <a class="header-anchor" href="#字符-串-类型" aria-label="Permalink to &quot;字符 (串) 类型&quot;">​</a></h3><p>不要以为字符类型就是 CHAR，CHAR 和 VARCHAR 的区别在于 CHAR 是固定长度，只要你定义一个字段是 CHAR(10)，那么不论你存储的数据是否达到了 10 个字节，它都要占去 10 个字节的空间;而 VARCHAR 则是可变长度的，如果一个字段可能的值是不固定长度的，我们只知道它不可能超过 10 个字符，把它定义为 VARCHAR(10) 是最合算的，VARCHAR 类型的占用空间是它的值的实际长度 +1。为什么要 +1 呢?这一个字节用于保存实际使用了多大的长度。从这个 +1 中也应该看到，如果一个字段，它的可能值最长是 10 个字符，而多数情况下也就是用到了 10 个字符时，用 VARCHAR 就不合算了：因为在多数情况下，实际占用空间是 11 个字节，比用 CHAR(10) 还多占用一个字节。</p><p>举个例子，就是一个存储股票名称和代码的表，股票名称绝大部分是四个字的，即 8 个字节;股票代码，上海的是六位数字，深圳的是四位数字。这些都是固定长度的，股票名称当然要用 CHAR(8);股票代码虽然是不固定长度，但如果使用 VARCHAR(6)，一个深圳的股票代码实际占用空间是 5 个字节，而一个上海的股票代码要占用 7 个字节!考虑到上海的股票数目比深圳的多，那么用 VARCHAR(6) 就不如 CHAR(6) 合算了。</p><p>虽然一个 CHAR 或 VARCHAR 的最大长度可以到 255，我认为大于 20 的 CHAR 是几乎用不到的――很少有大于 20 个字节长度的固定长度的东东吧?不是固定长度的就用 VARCHAR。大于 100 的 VARCHAR 也是几乎用不到的――比这更大的用 TEXT 就好了。TINYTEXT，最大长度为 255，占用空间也是实际长度 +1;TEXT，最大长度 65535，占用空间是实际长度 +2;MEDIUMTEXT，最大长度 16777215，占用空间是实际长度 +3;LONGTEXT，最大长度 4294967295，占用空间是实际长度 +4。为什么 +1、+2、+3、+4?你要是还不知道就该打 PP 了。这些可以用在论坛啊、新闻啊，什么的，用来保存文章的正文。根据实际情况的不同，选择从小到大的不同类型。</p><h3 id="枚举和集合类型" tabindex="-1">枚举和集合类型 <a class="header-anchor" href="#枚举和集合类型" aria-label="Permalink to &quot;枚举和集合类型&quot;">​</a></h3><p>枚举 (ENUM) 类型，最多可以定义 65535 种不同的字符串从中做出选择，只能并且必须选择其中一种，占用存储空间是一个或两个字节，由枚举值的数目决定;集合 (SET) 类型，最多可以有 64 个成员，可以选择其中的零个到不限定的多个，占用存储空间是一个到八个字节，由集合可能的成员数目决定。</p><p>举个例子来说，在 SQLServer 中，你可以节约到用一个 BIT 类型来表示性别 (男/女)，但 MySQL 没有 BIT，用 TINTINT 吗?不，可以用 ENUM(&#39;帅哥&#39;,&#39;美眉&#39;)，只有两种选择，所以只需一个字节――跟 TINYINT 一样大，但却可以直接用字符串 &#39;帅哥&#39; 和 &#39;美眉&#39; 来存取。真是太方便啦!</p><h2 id="预处理语句" tabindex="-1">预处理语句 <a class="header-anchor" href="#预处理语句" aria-label="Permalink to &quot;预处理语句&quot;">​</a></h2><p>预处理语句（Prepared Statements),是一种编译过的要执行的SQL语句模板，可以使用不同的变量参数定制它。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 占位符 :name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$sql </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shop_admin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$sth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bindParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;:id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,$id); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 绑定数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$sth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 占位符 ?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$sql </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shop_admin (username, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">password</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> (?, ?)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$sth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bindParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,$username); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1 表示第一个问号占位符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$sth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bindParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,$password); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2 表示第二个问号占位符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$sth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果不想挨个绑定数据，也可以在执行时传入数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$sth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ooo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>预处理语句的主要优点有：</p><ul><li>查询语句只需要被解析一次，就可以使用不同的参数执行多次。如果要重复执行许多次仅仅是参数不同（但结构相同）的查询，会浪费很多时间。庆幸的是在使用支持预处理语句的数据库时，在当查询准备好（Prepared）之后，数据库就会分析，编译并优化它要执行查询的计划。通过使用预处理语句可以避免重复分析、编译、优化的环节，也就是说使用预处理语句可以让数据库服务器的效率提升。</li><li>预处理语句的中的参数不需要使用引号，相应地会减少SQL注入情形的发生。</li></ul><h2 id="远程连接mysql" tabindex="-1">远程连接MySQL <a class="header-anchor" href="#远程连接mysql" aria-label="Permalink to &quot;远程连接MySQL&quot;">​</a></h2><h3 id="mysql8及之前的版本" tabindex="-1">mysql8及之前的版本 <a class="header-anchor" href="#mysql8及之前的版本" aria-label="Permalink to &quot;mysql8及之前的版本&quot;">​</a></h3><p>参考：</p><ul><li><a href="http://blog.csdn.net/chr23899/article/details/40401089" target="_blank" rel="noreferrer">MySql创建本地用户和远程用户 并赋予权限</a></li><li><a href="https://www.cnblogs.com/cnblogsfans/archive/2009/09/21/1570942.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/cnblogsfans/archive/2009/09/21/1570942.html</a></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># vim /etc/mysql/my.cnf</span></span>
<span class="line"><span>vim /etc/mysql/mysql.conf.d/mysqld.cnf</span></span></code></pre></div><p>注释掉绑定的本地地址</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>bind-address=127.0.0.1 ==&gt; #bind-address=127.0.0.1</span></span></code></pre></div><p>开放远程用户的访问权限</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>GRANT ALL PRIVILEGES ON *.* TO root@&quot;%&quot; IDENTIFIED BY &quot;123456&quot;;</span></span></code></pre></div><p>其中%代表任意ip，也可以指定其他ip地址，IDENTIFIED后面接登录密码，这里不需要跟本地的密码一样，注意密码强度。</p><p>刷新缓冲，重启mysql</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>flush privileges;</span></span>
<span class="line"><span>service mysql restart</span></span></code></pre></div><p>现在就可以在本地使用<code>SQLyog</code>来访问外部数据库了</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mysql -h IPaddress -uROOT -pPASSWARD</span></span></code></pre></div><h3 id="mysql8之后的版本" tabindex="-1">mysql8之后的版本 <a class="header-anchor" href="#mysql8之后的版本" aria-label="Permalink to &quot;mysql8之后的版本&quot;">​</a></h3><p>参考： <a href="https://blog.csdn.net/skyejy/article/details/80645981" target="_blank" rel="noreferrer">https://blog.csdn.net/skyejy/article/details/80645981</a></p><p>mysql8之后，需要先创建账号，再赋予权限</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 先创建</span></span>
<span class="line"><span>create user &#39;remote_admin&#39;@&#39;%&#39; identified by &#39;123456&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 再赋予权限</span></span>
<span class="line"><span>GRANT ALL PRIVILEGES ON *.* TO remote_admin@&quot;%&quot; WITH GRANT OPTION;</span></span></code></pre></div><p>如果是想要创建原始的账号密码，可以使用</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>create user &#39;native_root&#39;@&#39;127.0.0.1&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;</span></span></code></pre></div>`,106),t=[e];function p(h,d,k,r,o,c){return i(),a("div",null,t)}const u=s(n,[["render",p]]);export{E as __pageData,u as default};
