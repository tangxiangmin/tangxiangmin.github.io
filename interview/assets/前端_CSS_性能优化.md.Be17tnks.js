import{_ as i,c as s,o as a,a2 as l}from"./chunks/framework.DLPB9-dE.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端/CSS/性能优化.md","filePath":"前端/CSS/性能优化.md","lastUpdated":1620234346000}'),t={name:"前端/CSS/性能优化.md"},n=l(`<p>CSS的性能优化</p><h2 id="精灵图" tabindex="-1">精灵图 <a class="header-anchor" href="#精灵图" aria-label="Permalink to &quot;精灵图&quot;">​</a></h2><blockquote><p>将多个小图片拼接到一个图片中。通过 background-position 和元素尺寸调节需要显示的背景图案。</p></blockquote><p>优点：</p><ul><li>减少 HTTP 请求数，极大地提高页面加载速度</li><li>增加图片信息重复度，提高压缩比，减少图片大小</li></ul><p>缺点：</p><ul><li>图片合并麻烦</li><li>维护麻烦，修改一个图片可能需要从新布局整个图片，样式</li><li>缩放调整图标大小比较麻烦</li></ul><h2 id="fouc" tabindex="-1">FOUC <a class="header-anchor" href="#fouc" aria-label="Permalink to &quot;FOUC&quot;">​</a></h2><p>Flash Of Unstyled Content：用户定义样式表加载之前浏览器使用默认样式显示文档，用户样式加载渲染之后再从新显示文档，造成页面闪烁。</p><p>解决方法：把样式表放到文档的 head</p><h2 id="重绘和回流" tabindex="-1">重绘和回流 <a class="header-anchor" href="#重绘和回流" aria-label="Permalink to &quot;重绘和回流&quot;">​</a></h2><p>参考：</p><ul><li><a href="https://www.cnblogs.com/chenjg/p/10099886.html" target="_blank" rel="noreferrer">你真的了解回流和重绘吗</a></li><li><a href="https://mp.weixin.qq.com/s/5jMuFElLK4SPEIKrBvGI1Q" target="_blank" rel="noreferrer">渲染树怎么形成的你真的很懂吗？</a></li><li><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/24" target="_blank" rel="noreferrer">介绍下重绘和回流（Repaint &amp; Reflow），以及如何进行优化</a></li></ul><h3 id="重绘" tabindex="-1">重绘 <a class="header-anchor" href="#重绘" aria-label="Permalink to &quot;重绘&quot;">​</a></h3><p>由于节点的几何属性发生改变或者由于样式发生改变而不会影响布局的，称为重绘，例如outline, visibility, color、background-color等，重绘的代价是高昂的，因为浏览器必须验证DOM树上其他节点元素的可见性。</p><h3 id="回流" tabindex="-1">回流 <a class="header-anchor" href="#回流" aria-label="Permalink to &quot;回流&quot;">​</a></h3><p>部分渲染树（或者整个渲染树）布局或者几何属性改变时,需要重新分析并且节点尺寸需要重新计算。这被称为<strong>回流</strong>。注意这里至少会有一次回流-初始化页面布局</p><p>回流是影响浏览器性能的关键因素，因为其变化涉及到部分页面（或是整个页面）的布局更新。一个元素的回流可能会导致了其所有子元素以及DOM中紧随其后的节点、祖先节点元素的随后的回流。</p><p>回流必定会发生重绘，重绘不一定会引发回流。</p><p>下面是一些重绘和回流的触发场景</p><ul><li>添加、删除、更新 DOM 节点</li><li>通过 display: none 隐藏一个 DOM 节点-触发重排和重绘</li><li>通过 visibility: hidden 隐藏一个 DOM 节点-只触发重绘，因为没有几何变化</li><li>移动或者给页面中的 DOM 节点添加动画</li><li>添加一个样式表，调整样式属性</li><li>用户行为，例如调整窗口大小，改变字号，或者滚动。</li></ul><h3 id="浏览器批量更新" tabindex="-1">浏览器批量更新 <a class="header-anchor" href="#浏览器批量更新" aria-label="Permalink to &quot;浏览器批量更新&quot;">​</a></h3><p>现代浏览器大多都是通过队列机制来批量更新布局，浏览器会把修改操作放在队列中，至少一个浏览器刷新（即16.6ms）才会清空队列，但当你获取布局信息的时候，队列中可能有会影响这些属性或方法返回值的操作，即使没有，浏览器也会强制清空队列，触发回流与重绘来确保返回正确的值。</p><p>主要包括以下属性或方法：</p><ul><li>offsetTop、offsetLeft、offsetWidth、offsetHeight</li><li>scrollTop、scrollLeft、scrollWidth、scrollHeight</li><li>clientTop、clientLeft、clientWidth、clientHeight</li><li>width、height</li><li>getComputedStyle()</li><li>getBoundingClientRect()</li></ul><h3 id="减少重绘与回流" tabindex="-1">减少重绘与回流 <a class="header-anchor" href="#减少重绘与回流" aria-label="Permalink to &quot;减少重绘与回流&quot;">​</a></h3><p>CSS方面</p><ul><li>使用transform代替position，选择最多引起重绘而不是回流的属性，如visibility优于display:none</li><li>尽量避免使用table布局</li><li>避免使用css表达式</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">left: expression(document</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.body.offsetWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> - 180   &quot;px&quot;)</span></span></code></pre></div><ul><li>将频繁重绘或者回流的节点设置为图层，图层能够阻止该节点的渲染行为影响别的节点，例如will-change、video、iframe等标签，浏览器会自动将该节点变为图层。</li><li>CSS3硬件加速</li></ul><p>JS方面</p><ul><li>避免频繁操作样式，最好将多个改动统一处理</li><li>避免频繁操作DOM，可以在documentFragment上进行改动</li><li>避免频繁读取会引发回流/重绘的属性，使用变量将结果缓存起来</li></ul><h2 id="硬件加速" tabindex="-1">硬件加速 <a class="header-anchor" href="#硬件加速" aria-label="Permalink to &quot;硬件加速&quot;">​</a></h2><p>参考</p><ul><li><a href="https://www.cnblogs.com/PeunZhang/p/3510083.html" target="_blank" rel="noreferrer">用CSS开启硬件加速来提高网站性能</a></li><li><a href="https://blog.csdn.net/qq_34309704/article/details/80880101" target="_blank" rel="noreferrer">解决CSS3动画卡顿问题</a></li><li><a href="https://blog.csdn.net/zhangcanyan/article/details/52817838" target="_blank" rel="noreferrer">硬件加速导致的问题集合</a></li></ul><h3 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h3><p>定义：调用GPU代替CPU完成绘制的计算工作，从工作分摊和绘制机制优化来提升绘制速度。</p><p>常见的触发硬件加速的css属性：</p><ul><li>transform</li><li>opacity</li><li>filters</li><li>Will-change</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   -webkit-transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translate3d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">250</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">250</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">250</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   rotate3d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">250</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">250</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">250</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-120</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">deg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   scale3d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 虽然没有用到这些属性，也可以欺骗浏览器开启GPU */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translateZ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   backface-visibility</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   perspective</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translate3d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><p>使用css3硬件加速，可以让transform、opacity、filters这些动画不会引起回流重绘 。但是对于动画的其它属性，比如background-color这些，还是会引起回流重绘的，不过它还是可以提升这些动画的性能。</p><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><p>参考： <a href="https://www.cnblogs.com/zyyz/p/4975329.html" target="_blank" rel="noreferrer">CSS3开启硬件加速及利弊</a></p><p>如果你为太多元素使用css3硬件加速，会导致内存占用较大，会有性能问题。</p><p>在GPU渲染字体会导致抗锯齿无效。这是因为GPU和CPU的算法不同。因此如果你不在动画结束的时候关闭硬件加速，会产生字体模糊。</p><p>在Webkit内核的浏览器中，硬件加速会把需要渲染的元素放到特定的『Composited Layer』中，表示放到了一个新的『复合层（composited layer）』中渲染。</p><p>因此使用3D硬件加速提升动画性能时，最好给元素增加一个z-index属性，人为干扰复合层的排序，可以有效减少chrome创建不必要的复合层，提升渲染性能，移动端优化效果尤为明显</p>`,48),e=[n];function h(p,k,r,d,o,E){return a(),s("div",null,e)}const y=i(t,[["render",h]]);export{g as __pageData,y as default};
