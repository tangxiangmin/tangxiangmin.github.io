import{_ as e,c as a,o,a2 as t}from"./chunks/framework.DLPB9-dE.js";const b=JSON.parse('{"title":"前端工程化","description":"","frontmatter":{},"headers":[],"relativePath":"前端/前端工程化/README.md","filePath":"前端/前端工程化/README.md","lastUpdated":1684907685000}'),i={name:"前端/前端工程化/README.md"},l=t('<h1 id="前端工程化" tabindex="-1">前端工程化 <a class="header-anchor" href="#前端工程化" aria-label="Permalink to &quot;前端工程化&quot;">​</a></h1><p>前端工程化涵盖：创建、开发、编译、打包、测试、发布、监控全流程</p><h2 id="项目初始化-cli工具" tabindex="-1">项目初始化：cli工具 <a class="header-anchor" href="#项目初始化-cli工具" aria-label="Permalink to &quot;项目初始化：cli工具&quot;">​</a></h2><p>目前主流框架都提供了cli工具方便快速搭建项目，如<code>create-react-app</code>、<code>vue-ci</code>等。</p><p>cli本质是一种用户操作界面，根据一些指令和参数来与程序完成交互并得到相应的反馈。使用cli，一般需要以下方面</p><ul><li>基本命令使用，如<code>vue create myAPP</code></li><li>自定义配置，在某些场景下，官方提供的配置并不能满足业务需求，因此需要掌握手动修改cli配置的方法，如在CRA项目中使用<code>npm run reject</code>展示源配置文件，手动配置</li><li>内部实现，我们需要大致了解工具内部原理实现，这样方便定位问题</li></ul><h2 id="开发环境" tabindex="-1">开发环境 <a class="header-anchor" href="#开发环境" aria-label="Permalink to &quot;开发环境&quot;">​</a></h2><p>前端开发环境，可以明显提高我们的开发效率，常见需求</p><ul><li>本地开发 lint的规范一定要在项目初期就落地</li><li>处理模块化：在开发环境CSS 和 JS 的模块化语法，在线上进行打包，如<code>webpack</code></li><li>编译语法：SCSS、ES6等需要转换成浏览器被浏览器识别的代码，如预编译<code>SCSS</code>、后处理<code>PostCSS</code>等</li><li>代码压缩：将 CSS、JS 代码混淆压缩，为了让代码体积更小，加载更快，如<code>uglifyJS</code>等</li></ul><h3 id="开发工具" tabindex="-1">开发工具 <a class="header-anchor" href="#开发工具" aria-label="Permalink to &quot;开发工具&quot;">​</a></h3><ul><li>编码工具，常见功能比如指定文件代码高亮、主题、代码联想啥的，常用Webstorm、VScode</li><li>host切换工具，常在线上、测试环境、本地等多个环境下切换host，推荐<a href="https://github.com/oldj/SwitchHosts" target="_blank" rel="noreferrer">SwitchHosts</a></li><li>抓包，调试移动端接口时，需要进行抓包，Mac上使用Charles，Windows上使用Fidder</li><li>终端，需要了解终端常用的一些命令</li></ul><h3 id="版本控制" tabindex="-1">版本控制 <a class="header-anchor" href="#版本控制" aria-label="Permalink to &quot;版本控制&quot;">​</a></h3><p>参考</p><ul><li><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" target="_blank" rel="noreferrer">关于版本控制</a></li><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noreferrer">git教程</a></li></ul><p>用的比较多的是<code>Git bash</code>和<code>source tree</code>，学习git需要掌握下面几个方面的知识</p><ul><li>掌握基本的概念和命令，如提交、版本回退、分支等</li><li>规范commit，可以使用<a href="https://www.npmjs.com/package/commitizen" target="_blank" rel="noreferrer">commitizen</a>来规范commit提交信息</li><li>了解多人协作开发时的<a href="https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow" target="_blank" rel="noreferrer">git flow</a></li></ul><h3 id="数据模拟" tabindex="-1">数据模拟 <a class="header-anchor" href="#数据模拟" aria-label="Permalink to &quot;数据模拟&quot;">​</a></h3><p>使用mock，前后端分离</p><h2 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h2><p>单元测试，<code>BDD</code>、<code>TDD</code>等，使用mocha等工具</p><h2 id="打包" tabindex="-1">打包 <a class="header-anchor" href="#打包" aria-label="Permalink to &quot;打包&quot;">​</a></h2><p>目前比较流行的做法是<code>webpack</code>打包项目代码，<code>rollup</code>打包工具库代码</p><h2 id="发布" tabindex="-1">发布 <a class="header-anchor" href="#发布" aria-label="Permalink to &quot;发布&quot;">​</a></h2><p><code>travis-ci</code>、git hooks、shell等，通过命令自动部署到生成环境，提供日志和回滚等功能，避免手动发布出错。</p><h2 id="监控" tabindex="-1">监控 <a class="header-anchor" href="#监控" aria-label="Permalink to &quot;监控&quot;">​</a></h2><p>前端打点、日志统计</p>',26),r=[l];function c(d,h,n,s,p,u){return o(),a("div",null,r)}const f=e(i,[["render",c]]);export{b as __pageData,f as default};
