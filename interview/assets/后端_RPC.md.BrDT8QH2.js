import{_ as s,c as a,o as i,a2 as n}from"./chunks/framework.DLPB9-dE.js";const u=JSON.parse('{"title":"RPC","description":"","frontmatter":{},"headers":[],"relativePath":"后端/RPC.md","filePath":"后端/RPC.md","lastUpdated":1709042257000}'),e={name:"后端/RPC.md"},p=n(`<h1 id="rpc" tabindex="-1">RPC <a class="header-anchor" href="#rpc" aria-label="Permalink to &quot;RPC&quot;">​</a></h1><p>RPC(Remote Procedure Call)即远程过程调用,是一种进程间通信方式。它允许程序调用另一个地址空间的过程或函数,而不用了解底层通信细节。</p><p>从程序员角度而言，RPC与本地调用几乎是相同的，它使得远程交互可以像本地调用一样简单。RPC框架屏蔽了底层的通信细节和网络交互复杂度。</p><p>常用的RPC框架包括gRPC、Thrift、Http-RPC等。使用RPC可以更容易实现服务间通信与集成,构建分布式计算系统。</p><p>下面是常见的RPC框架的组成结构 <img src="https://img.shymean.com/oPic/1705839833949_971.webp" alt=""></p><h2 id="thrift" tabindex="-1">thrift <a class="header-anchor" href="#thrift" aria-label="Permalink to &quot;thrift&quot;">​</a></h2><p>参考</p><ul><li><a href="https://thrift.apache.org/" target="_blank" rel="noreferrer">thrift官网</a></li><li><a href="https://segmentfault.com/a/1190000012612473" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000012612473</a></li><li><a href="https://juejin.im/post/5be058ee6fb9a049f153a845" target="_blank" rel="noreferrer">https://juejin.im/post/5be058ee6fb9a049f153a845</a></li><li><a href="https://www.cnblogs.com/cyfonly/p/6059374.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/cyfonly/p/6059374.html</a></li><li><a href="https://segmentfault.com/a/1190000004610166" target="_blank" rel="noreferrer">基于 Thrift 的 Node.js 微服务</a></li></ul><p>Thrift 是 Facebook 开源的一个 RPC 框架,使用自己开发的接口描述语言(IDL)来定义服务接口和数据结构。</p><p>Thrift 通过代码生成产生不同语言的客户端和服务端代码。客户端与服务端可以使用 Thrift 的二进制协议进行通信,该协议具有良好的跨语言互操作性。</p><p>Thrift 支持多种服务模型,比如multiplexing、非阻塞异步 IO等。它支持众多流行编程语言,使用也比较灵活。但是其自有协议增加了一定额外开销。</p><p><img src="https://img.shymean.com/oPic/1705839858693_479.webp" alt=""></p><p><code>Thrift</code>是一个轻量级、跨语言的RPC框架，包含如下特性</p><ul><li>基于IDL（接口描述语言）生成跨语言的RPC clients and servers，支持超过20种语言</li><li>支持二进制的高性能的编解码框架</li><li>支持NIO的底层通信</li><li>相对简单的服务调用模型</li></ul><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>Thrift 传输数据采用二进制格式，相对 XML 和 JSON 体积更小，对于高并发、大数据量和多语言的环境更有优势。</p><p>关键字</p><ul><li><code>namespace</code>　定义包名</li><li><code>struct</code>　定义服务接口的参数，返回值使用到的类结构。如果接口的参数都是基本类型，则不需要定义struct</li><li><code>service</code>　定义接口</li></ul><p>数据类型</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>bool 布尔型</span></span>
<span class="line"><span>byte ８位整数</span></span>
<span class="line"><span>i16  16位整数</span></span>
<span class="line"><span>i32  32位整数</span></span>
<span class="line"><span>i64  64位整数</span></span>
<span class="line"><span>double 双精度浮点数</span></span>
<span class="line"><span>string 字符串</span></span>
<span class="line"><span>binary 字节数组</span></span>
<span class="line"><span>list&lt;i16&gt; List集合，必须指明泛型</span></span>
<span class="line"><span>map&lt;string, string&gt; Map类型，必须指明泛型</span></span>
<span class="line"><span>set&lt;i32&gt; Set集合，必须指明泛型</span></span></code></pre></div><h3 id="使用过程" tabindex="-1">使用过程 <a class="header-anchor" href="#使用过程" aria-label="Permalink to &quot;使用过程&quot;">​</a></h3><p>在过去我参与过的项目开发中，前端会负责使用Node.js封装数据接口作为bff层，自己定制前端需要的数据。开发模式一般为</p><ul><li>后端提供Thrfit描述文件</li><li>前端拿到描述文件后，通过thrfit编译器生成对应的Node.js接口lib文件</li><li>在业务系统中，引入对应的lib文件，在封装的接口内调用，加工一下数据，然后通过HTTP JSON返回给前端。</li></ul><p>接下来演示一个使用Java作为服务端编写接口，使用Node.js作为客户端通过Thrift调用接口的RPC调用过程。</p><p>首先，服务端开发人员根据业务需要，定义IDL接口文件,说明服务端要开放出去的接口函数、参数和数据结构</p><div class="language-thrift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">thrift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>service UserService {</span></span>
<span class="line"><span>   bool addUser(1: User user);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>struct User {</span></span>
<span class="line"><span>  1: i64 id,  </span></span>
<span class="line"><span>  2: string name</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>然后，服务端会通过服务端使用Thrift编译器,基于上述IDL接口描述文件，生成代码框架,实现服务器端逻辑。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserServiceImpl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService.Iface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(User </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 实现加用户逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>最后在客户端，会根据相同的IDL文件，通过Thrift编译器生成客户端代码,用来调用服务器端导出的接口</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>thrift --gen js user_service.thrift</span></span></code></pre></div><p>这个命令会生成一段js调用PRC服务端的代码，在自己的业务代码中，需要引入这个模块，然后使用相关的API完成接口调用。</p><h2 id="grpc" tabindex="-1">gRPC <a class="header-anchor" href="#grpc" aria-label="Permalink to &quot;gRPC&quot;">​</a></h2><p>TODO 暂时没有使用过</p>`,33),t=[p];function l(r,h,c,o,d,k){return i(),a("div",null,t)}const f=s(e,[["render",l]]);export{u as __pageData,f as default};
