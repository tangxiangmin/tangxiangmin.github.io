import{_ as l,c as i,o as e,a2 as a}from"./chunks/framework.DLPB9-dE.js";const f=JSON.parse('{"title":"性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"前端/业务相关/性能优化.md","filePath":"前端/业务相关/性能优化.md","lastUpdated":1620234346000}'),t={name:"前端/业务相关/性能优化.md"},r=a('<h1 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h1><p>参考：</p><ul><li><a href="https://juejin.im/post/5a99f80cf265da238c3a1e16" target="_blank" rel="noreferrer">https://juejin.im/post/5a99f80cf265da238c3a1e16</a></li><li><a href="https://mp.weixin.qq.com/s/YI-96IbtIjTDzS-3N-9FAg" target="_blank" rel="noreferrer">腾讯新闻前端团队：深入理解前端性能监控</a></li><li>之前的整理：<a href="https://www.shymean.com/article/%E5%A6%82%E4%BD%95%E8%AE%A9%E7%BD%91%E7%AB%99%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6%E5%8F%98%E5%BF%AB" target="_blank" rel="noreferrer">如何让网站加载速度变快</a></li></ul><p>前端性能优化可以从下面几个方面入手</p><ul><li>减少请求数 <ul><li>字体图标、雪碧图</li><li>合并js、css</li><li>长链接</li><li>文件按需加载</li></ul></li><li>优化请求速度 <ul><li>预加载</li><li>资源压缩，减少请求文件的体积</li><li>CDN</li><li>webp</li></ul></li><li>缓存 <ul><li>http缓存</li><li>本地数据持久化</li></ul></li><li>首屏效果 <ul><li>ssr</li><li>非关键资源延迟加载</li><li>骨架屏</li><li>BigPipe</li></ul></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>减少http请求,主要思想就是减少HTML文档内链接的资源数量： <ul><li>项目上线时将<code>CSS``JavaScript</code>等文件压缩合并打包，减少源文件的数量和体积</li><li>将多张小图片制作成精灵图</li><li>将资源转换为<code>base64</code>编码</li><li>使用缓存可以加快网页打开速度，有效减少http请求</li><li>使用懒加载，按需加载对应资源</li></ul></li><li>页面加载速度 <ul><li>使用多个域名来存储网络资源</li><li>页面渲染流程 <ul><li>选择器从右向左解析，嵌套顺序不宜过深</li></ul></li><li>页面打开效率 <ul><li>使用CDN加载资源</li><li>将CSS放在页面头部，防止页面闪烁</li><li>将JavaScript异步或延迟加载，防止JavaScript运行阻塞页面加载</li><li>延迟请求首屏外的文件，即优先加载首屏内容。</li></ul></li></ul></li><li>页面运行效率 <ul><li>reflow和repaint可能会严重影响性能，需要尽可能的减少reflow和repaint操作 <ul><li>不要一条一条地修改DOM的样式，如果修改的样式过多可以将样式统一在某个类中，然后直接更改元素节点的className；</li><li>使用临时变量保存DOM节点，而不是每次都直接对DOM节点进行操作（减少元素节点的读写），在JS性能与浏览器性能方面都能得到一些优化；</li><li>尽可能修改层级比较低的DOM，缩小操作的影响范围；</li><li>放弃使用table进行布局，一个很小的改动都会造成整个table的重新布局</li></ul></li><li>JavaScript中减少作用域链的查找，避免使用<code>eval</code>和<code>Function</code>等性能缓慢的接口</li><li>DOM操作的代价是十分昂贵的，可以使用<code>DocumentFragment</code>暂时存放那些一次插入文档的节点</li><li>事件节流</li></ul></li></ul><h3 id="一些需要注意的小细节" tabindex="-1">一些需要注意的小细节 <a class="header-anchor" href="#一些需要注意的小细节" aria-label="Permalink to &quot;一些需要注意的小细节&quot;">​</a></h3><p>问：<strong>图片懒加载中，为何将实际图片资源路径放在<code>data-src</code>中?</strong> 答：所有 HTML 中自定义的属性，都应该用data-开头，因为data-开头的属性浏览器渲染的时候会忽略掉，提高渲染性能。</p><h3 id="长列表性能优化" tabindex="-1">长列表性能优化 <a class="header-anchor" href="#长列表性能优化" aria-label="Permalink to &quot;长列表性能优化&quot;">​</a></h3><p>如果需要渲染的DOM节点很多，会导致页面很卡，可以使用“窗口化”的技术来优化</p><h2 id="bigpipe" tabindex="-1">bigPipe <a class="header-anchor" href="#bigpipe" aria-label="Permalink to &quot;bigPipe&quot;">​</a></h2><p>参考</p><ul><li><a href="http://www.alloyteam.com/2015/03/bigpipe%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/" target="_blank" rel="noreferrer">BigPipe</a></li><li><a href="https://juejin.im/post/5c7a985051882549847e85e0" target="_blank" rel="noreferrer">首屏优化之BigPipe</a></li><li><a href="https://blog.csdn.net/qq8427003/article/details/64921324" target="_blank" rel="noreferrer">bigpipe实现理论背景篇</a>，建议阅读</li></ul><p>解决问题：减少白屏时间，提高首屏加载渲染速度</p><p>实现原理：</p><ul><li>bigpipe主要思想是将页面区域按拆分成多个模块，然后通过Web服务器和浏览器之间建立管道，进行分段输出。</li><li>主要使用HTTP响应头<code>Transfer-Encoding:chunked</code>，让浏览器尽早的接收到html，可以先行渲染。</li></ul><p>用于页面上各个模块之间联系较小，可以分开展示，对于SEO需求较弱的场景下，可以使用bigpipe让用户尽可能早地看见视图，</p>',18),o=[r];function p(c,n,s,d,u,h){return e(),i("div",null,o)}const b=l(t,[["render",p]]);export{f as __pageData,b as default};
