import{_ as a,c as e,o as i,a2 as s}from"./chunks/framework.DLPB9-dE.js";const g=JSON.parse('{"title":"CSS","description":"","frontmatter":{},"headers":[],"relativePath":"前端/CSS/基础知识.md","filePath":"前端/CSS/基础知识.md","lastUpdated":1620234346000}'),t={name:"前端/CSS/基础知识.md"},l=s(`<h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h1><h2 id="样式重置" tabindex="-1">样式重置 <a class="header-anchor" href="#样式重置" aria-label="Permalink to &quot;样式重置&quot;">​</a></h2><p>CSS reset 的作用是让各个浏览器的 CSS 样式有一个统一的基准。在项目中可以根据自己的需求选择性地进行样式重置。</p><p>以前看过张鑫旭大神的一篇博客:<a href="http://www.zhangxinxu.com/wordpress/2010/04/css-reset%E7%9A%84%E9%87%8D%E6%96%B0%E5%AE%A1%E8%A7%86-%E9%81%BF%E5%85%8D%E6%A0%B7%E5%BC%8F%E9%87%8D%E7%BD%AE/" target="_blank" rel="noreferrer">CSS reset 的重新审视 – 避免样式重置</a>，感觉很有道理，不妨移步阅读一下。</p><h2 id="盒子模型" tabindex="-1">盒子模型 <a class="header-anchor" href="#盒子模型" aria-label="Permalink to &quot;盒子模型&quot;">​</a></h2><blockquote><p>在 CSS 中，使用标准盒模型描述这些矩形盒子中的每一个。这个模型描述了元素所占空间的内容。每个盒子有四个边：外边距边, 边框边, 内填充边 与 内容边。</p></blockquote><ul><li>在标准模式下，一个块的总宽度=width+margin(左右)+padding(左右)+border(左右)</li><li>在怪异(ie)模式下，一个块的总宽度=width+margin（左右）（既 width 已经包含了 padding 和 border 值）</li></ul><p><strong>box-sizing</strong></p><blockquote><p>更改用于计算元素宽度和高度的默认的 CSS 盒子模型</p></blockquote><ul><li>content-box 是默认值。如果你设置一个元素的宽为 100px，那么这个元素的内容区会有 100px 宽，并且任何边框和内边距的宽度都会被<strong>增加</strong>到最后绘制出来的元素宽度中。</li><li>border-box 告诉浏览器去理解你设置的边框和内边距的值是包含在 width 内的。也就是说，如果你将一个元素的 width 设为 100px,那么这 100px 会包含其它的 border 和 padding，内容区的实际宽度会是 width 减去 border + padding 的计算值。大多数情况下这使得我们更容易的去设定一个元素的宽高</li></ul><h2 id="行高" tabindex="-1">行高 <a class="header-anchor" href="#行高" aria-label="Permalink to &quot;行高&quot;">​</a></h2><p>行高指文本行基线之间的距离。实际上文本行每行的行内元素都会生成一个内容区，而每个内容区又会生成对应的行内框，在默认情况下，行内框的大小即为字体大小，而使用 line-height 则是显式地重新指定了文本行中各个行内框的大小，只需要将行间距均分成两半且应用到每个内容的顶部和底部，就可以得到对应的重新生成的行内框的大小</p><ul><li>如果使用 em,ex 和百分数指定行高，都是相对于元素的 font-size 进行计算</li><li>如果是从父元素继承行高，则情况会变得复杂： <ul><li>如果使用百分数来设置行高，浏览器会首先计算其父元素的字体大小与对应百分数的乘积，得到对应的结果再传递给对应元素（当子元素的字体大小大于该值就会出现文本行重叠的情况）；</li><li>如果使用乘积因子来指定行高，浏览器会计算该元素的字体大小（如果没有则计算该元素从其父元素继承得到的字体大小），然后乘以对应的乘积因子，并将结果应用在行高之上。</li></ul></li></ul><h2 id="flex" tabindex="-1">Flex <a class="header-anchor" href="#flex" aria-label="Permalink to &quot;Flex&quot;">​</a></h2><p>参考之前的整理</p><ul><li><a href="http://www.shymean.com/article/flex%E5%B8%83%E5%B1%80" target="_blank" rel="noreferrer">flex 布局</a></li></ul><p>需要理解<strong>容器</strong>（父元素）和<strong>项目</strong>（子元素）这两个概念，然后学习和理解其语法就容易得多了。</p><h2 id="栅格系统响应式原理" tabindex="-1">栅格系统响应式原理 <a class="header-anchor" href="#栅格系统响应式原理" aria-label="Permalink to &quot;栅格系统响应式原理&quot;">​</a></h2><p>这里有一个简单的<a href="https://github.com/tangxiangmin/cssMagic/blob/master/src/scss/layout/_grid.scss" target="_blank" rel="noreferrer">实现</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;div class=&quot;xs-6 sm-4 md-3 lg-2&quot;&gt;&lt;/div&gt;</span></span></code></pre></div><p>利用媒介查询，在相关的 break-points 点，划分<code>xs</code>、<code>sm</code>、<code>md</code>和<code>lg</code>等不同尺寸的样式类，用于指定在对应分辨率下的网格大小。 首先实现<code>xs</code>，然后依次实现后面的样式类，这样在大分辨率下的样式类会覆盖小分辨率的样式类，达到响应式的布局。</p><h2 id="rem-实现及注意事项" tabindex="-1">Rem 实现及注意事项 <a class="header-anchor" href="#rem-实现及注意事项" aria-label="Permalink to &quot;Rem 实现及注意事项&quot;">​</a></h2><ul><li><a href="https://github.com/amfe/article/issues/17" target="_blank" rel="noreferrer">使用 Flexible 实现手淘 H5 页面的终端适配</a></li><li>基于 calc 和 vw 实现的 rem 布局</li></ul><p>其实 rem 布局的本质是等比缩放，一般是基于宽度，然后可以完美还原设计图</p><h2 id="viewport" tabindex="-1">ViewPort <a class="header-anchor" href="#viewport" aria-label="Permalink to &quot;ViewPort&quot;">​</a></h2><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// width    设置viewport宽度，为一个正整数，或字符串‘device-width’</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// device-width  设备宽度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// initial-scale    默认缩放比例（初始缩放比例），为一个数字，可以带小数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// user-scalable    是否允许手动缩放</span></span></code></pre></div>`,26),n=[l];function r(h,o,p,d,c,k){return i(),e("div",null,n)}const E=a(t,[["render",r]]);export{g as __pageData,E as default};
