import{_ as n,c as s,o as a,b as p}from"./app.2f94c7c4.js";const b='{"title":"\u53C2\u8003","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u53C2\u8003","slug":"\u53C2\u8003"},{"level":2,"title":"\u5B9A\u4E49","slug":"\u5B9A\u4E49"},{"level":2,"title":"\u5177\u4F53\u4F5C\u7528","slug":"\u5177\u4F53\u4F5C\u7528"},{"level":3,"title":"\u5B8C\u6574\u4EE3\u7801","slug":"\u5B8C\u6574\u4EE3\u7801"}],"relativePath":"\u6570\u636E\u7ED3\u6784\u548C\u7B97\u6CD5/\u7EBF\u6BB5\u6811.md"}',t={},o=p(`<h2 id="\u53C2\u8003" tabindex="-1">\u53C2\u8003 <a class="header-anchor" href="#\u53C2\u8003" aria-hidden="true">#</a></h2><ul><li><a href="https://leetcode.cn/problems/range-sum-query-mutable/%EF%BC%8C" target="_blank" rel="noopener noreferrer">https://leetcode.cn/problems/range-sum-query-mutable/\uFF0C</a> letcode 307\u9898\uFF0C\u7B2C\u4E00\u6B21\u4E86\u89E3\u5230\u7EBF\u6BB5\u6811</li><li><a href="https://www.cnblogs.com/RioTian/p/13409694.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/RioTian/p/13409694.html</a> \uFF0C\u8FD9\u7BC7\u6587\u7AE0\u5199\u5F97\u5F88\u901A\u900F</li></ul><h2 id="\u5B9A\u4E49" tabindex="-1">\u5B9A\u4E49 <a class="header-anchor" href="#\u5B9A\u4E49" aria-hidden="true">#</a></h2><p>\u7EBF\u6BB5\u6811\uFF08Segment Tree\uFF09\u662F\u4E00\u79CD\u4E8C\u53C9\u6811\u6570\u636E\u7ED3\u6784\uFF0C\u901A\u5E38\u7528\u4E8E\u5904\u7406\u533A\u95F4\u67E5\u8BE2\u95EE\u9898\u3002\u5B83\u53EF\u4EE5\u7528\u6765\u7EF4\u62A4\u4E00\u4E2A\u5E8F\u5217\u7684\u4FE1\u606F\uFF0C\u4F8B\u5982\u533A\u95F4\u6700\u5927\u503C\u3001\u533A\u95F4\u6700\u5C0F\u503C\u3001\u533A\u95F4\u548C\u7B49\uFF0C\u5E38\u7528\u4E8E\u7EF4\u62A4 \u533A\u95F4\u4FE1\u606F \u7684\u6570\u636E\u7ED3\u6784</p><p>\u7EBF\u6BB5\u6811\u7684\u6839\u8282\u70B9\u8868\u793A\u6574\u4E2A\u5E8F\u5217\u7684\u533A\u95F4\uFF0C\u6BCF\u4E2A\u8282\u70B9\u8868\u793A\u5176\u5BF9\u5E94\u533A\u95F4\u7684\u4FE1\u606F\u3002\u5BF9\u4E8E\u6BCF\u4E2A\u8282\u70B9\uFF0C\u5B83\u7684\u5DE6\u5B50\u8282\u70B9\u8868\u793A\u8BE5\u533A\u95F4\u7684\u5DE6\u534A\u90E8\u5206\uFF0C\u53F3\u5B50\u8282\u70B9\u8868\u793A\u8BE5\u533A\u95F4\u7684\u53F3\u534A\u90E8\u5206\uFF0C\u76F4\u5230\u53F6\u5B50\u8282\u70B9\u8868\u793A\u5355\u4E2A\u5143\u7D20\u3002</p><p>\u7EBF\u6BB5\u6811\u7684\u6784\u5EFA\u8FC7\u7A0B\u901A\u5E38\u662F\u9012\u5F52\u7684\uFF0C\u6BCF\u6B21\u5C06\u5F53\u524D\u533A\u95F4\u4E00\u5206\u4E3A\u4E8C\uFF0C\u7136\u540E\u9012\u5F52\u6784\u5EFA\u5DE6\u53F3\u5B50\u6811\u3002\u6784\u5EFA\u5B8C\u6210\u540E\uFF0C\u53EF\u4EE5\u7528\u6811\u7684\u6DF1\u5EA6\u4F18\u5148\u904D\u5386\u5C06\u8282\u70B9\u6309\u987A\u5E8F\u7F16\u53F7\uFF0C\u6BCF\u4E2A\u8282\u70B9\u7684\u7F16\u53F7\u5373\u4E3A\u5176\u5BF9\u5E94\u533A\u95F4\u7684\u8D77\u59CB\u4F4D\u7F6E\u3002</p><p>\u67E5\u8BE2\u64CD\u4F5C\u53EF\u4EE5\u901A\u8FC7\u9012\u5F52\u5730\u5411\u4E0B\u904D\u5386\u8282\u70B9\u5B9E\u73B0\uFF0C\u5177\u4F53\u8FC7\u7A0B\u662F\u5C06\u67E5\u8BE2\u533A\u95F4\u4E0E\u5F53\u524D\u8282\u70B9\u533A\u95F4\u8FDB\u884C\u6BD4\u8F83\uFF0C\u5982\u679C\u5B8C\u5168\u5305\u542B\u5219\u76F4\u63A5\u8FD4\u56DE\u8BE5\u8282\u70B9\u7684\u4FE1\u606F\uFF0C\u5426\u5219\u5C06\u67E5\u8BE2\u533A\u95F4\u4E00\u5206\u4E3A\u4E8C\uFF0C\u5206\u522B\u9012\u5F52\u67E5\u8BE2\u5DE6\u53F3\u5B50\u6811\uFF0C\u6700\u540E\u5C06\u5B50\u6811\u8FD4\u56DE\u7684\u4FE1\u606F\u5408\u5E76\u3002</p><p>\u66F4\u65B0\u64CD\u4F5C\u901A\u5E38\u4E5F\u662F\u9012\u5F52\u7684\uFF0C\u5BF9\u4E8E\u8981\u66F4\u65B0\u7684\u4F4D\u7F6E\uFF0C\u9700\u8981\u627E\u5230\u5176\u5BF9\u5E94\u7684\u53F6\u5B50\u8282\u70B9\uFF0C\u7136\u540E\u9012\u5F52\u5411\u4E0A\u66F4\u65B0\u7236\u8282\u70B9\u7684\u4FE1\u606F\uFF0C\u76F4\u5230\u6839\u8282\u70B9\u3002</p><p>\u7EBF\u6BB5\u6811\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A <code>$O(n\\log n)$</code>\uFF0C\u5176\u4E2D $n$ \u662F\u5E8F\u5217\u7684\u957F\u5EA6\u3002\u7EBF\u6BB5\u6811\u5E38\u7528\u4E8E\u89E3\u51B3\u533A\u95F4\u67E5\u8BE2\u95EE\u9898\uFF0C\u5982\u533A\u95F4\u6700\u503C\u3001\u533A\u95F4\u548C\u3001\u533A\u95F4\u8986\u76D6\u7B49\u3002</p><h2 id="\u5177\u4F53\u4F5C\u7528" tabindex="-1">\u5177\u4F53\u4F5C\u7528 <a class="header-anchor" href="#\u5177\u4F53\u4F5C\u7528" aria-hidden="true">#</a></h2><p>\u7EBF\u6BB5\u6811\u53EF\u4EE5\u4F7F\u7528\u6811\u7ED3\u6784\uFF0C\u4E5F\u53EF\u4EE5\u7528\u6570\u7EC4\u6765\u5B58</p><p>\u6BD4\u5982\u6709\u4E2A\u5217\u8868[1,2,3,4,5]\uFF0C\u7EBF\u6BB5\u6811\u4F1A\u901A\u8FC7\u4E8C\u53C9\u6811\u4FDD\u5B58\u5DE6\u53F3\u5206\u6BB5\u7684\u548C\uFF0C\u8FD9\u6837\u5C31\u53EF\u4EE5\u5FEB\u901F\u6C42\u4EFB\u4F55\u4E00\u4E2A\u533A\u95F4\u7684\u548C</p><div class="language-"><pre><code>a = [1,2,3,4,5]
d[1] = sum(1~5) = 15
    d[2] = sum(1~3) = 6
        d[4] = sum(1~2) = 3
            d[8] = sum(1~1) = 1
            d[9] = sum(2~2) = 2
        d[5] = sum(3~3) = 3
    d[3] = sum(4~5) = 9
        d[6] = sum(4~4) = 4
        d[7] = sum(5~5) = 5
</code></pre></div><p>\u53EF\u4EE5\u770B\u89C1\u53F6\u5B50\u8282\u70B9\u5C31\u662F\u957F\u5EA6\u4E3A1\u7684\u539F\u6570\u7EC4\u4E2D\u7684\u5143\u7D20\uFF0C\u7236\u8282\u70B9\u4FDD\u5B58\u4E86\u5BF9\u5E94\u5B50\u8282\u70B9\u533A\u95F4\u8303\u56F4\u7684\u548C\uFF0C\u6838\u5FC3\u601D\u60F3\u8FD8\u662F\u4E8C\u5206\u548C\u5206\u6CBB\uFF0C\u73B0\u5728\u7EDF\u8BA1\u533A\u95F4\u5185\u6570\u636E\u5C31\u5F88\u7B80\u5355</p><ul><li>\u6C42\u533A\u95F4<code>[1,3]</code>\u6240\u6709\u5143\u7D20\u7684\u548C\uFF0C\u76F4\u63A5\u627E\u5230\u5BF9\u5E94\u4FDD\u5B58\u7684\u533A\u95F4\u548C<code>d[2]</code>\u5373\u53EF</li><li>\u6C42\u533A\u95F4<code>[3,5]</code>\u6240\u6709\u5143\u7D20\u7684\u548C\uFF0C\u867D\u7136\u6CA1\u6709\u76F4\u63A5\u4FDD\u5B58<code>3~5</code>\u4F46\u662F\u53EF\u4EE5\u62C6\u5206\u6210\u533A\u95F4<code>3~3</code>+<code>4~5</code>\uFF0C\u5373<code>d[5] + d[3]</code></li></ul><p>\u5728\u4E0D\u8003\u8651\u4FEE\u6539\u7684\u60C5\u51B5\u4E0B\uFF0C\u524D\u7F00\u548C\u4E5F\u53EF\u4EE5\u5FEB\u901F\u6C42\u67D0\u4E2A\u533A\u95F4\u5185\u7684\u5143\u7D20\u548C\uFF0C\u4F46\u5982\u679C\u8003\u8651\u4E86\u4FEE\u6539\u5143\u7D20\uFF0C\u6BCF\u6B21\u53D8\u66F4\u4E4B\u540E\u90FD\u9700\u8981\u6C42\u5BF9\u5E94\u5143\u7D20\u4E4B\u540E\u7684\u524D\u7F00\u548C\uFF0C\u4F46\u7EBF\u6BB5\u6811\u53EA\u9700\u8981\u4FEE\u6539\u76F8\u5173\u7236\u8282\u70B9\u7684\u503C\u5373\u53EF</p><p>\u4ECE\u7EBF\u6BB5\u6811\u7684\u7ED3\u6784\u53EF\u4EE5\u770B\u51FA\uFF0C\u9700\u8981\u5148\u6784\u5EFA\u5B50\u8282\u70B9\uFF0C\u624D\u80FD\u6C42\u51FA\u7236\u8282\u70B9\u7684\u548C\uFF0C\u56E0\u6B64\u53EF\u4EE5\u5148\u4ECE\u53F6\u5B50\u8282\u70B9\u5F00\u59CB\u9012\u5F52\u6784\u5EFA</p><div class="language-js"><pre><code><span class="token keyword">const</span> segmentTree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * node \u7EBF\u6BB5\u6811\u4E2D\u7B2Cn\u4E2A\u8282\u70B9\u7D22\u5F15\u503C
 * s \u5DE6\u533A\u95F4
 * e \u53F3\u533A\u95F4
 * nums \u539F\u59CB\u6570\u636E\u5217\u8868
 */</span>
<span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u53F6\u5B50\u8282\u70B9\u5C31\u662F\u9012\u5F52\u7EC8\u6B62\u6761\u4EF6</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">===</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        segmentTree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> m <span class="token operator">=</span> s <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4E8C\u5206\u5DE6\u53F3</span>
    <span class="token function">build</span><span class="token punctuation">(</span>node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// node * 2 + 1 \u5C31\u662F\u5DE6\u8282\u70B9</span>
    <span class="token function">build</span><span class="token punctuation">(</span>node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// node * 2 + 2 \u5C31\u662F\u53F3\u8282\u70B9</span>
    segmentTree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> segmentTree<span class="token punctuation">[</span>node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> segmentTree<span class="token punctuation">[</span>node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">build</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>segmentTree<span class="token punctuation">)</span> <span class="token comment">// [15, 6, 9, 3, 3, 4, 5, 1, 2]</span>
</code></pre></div><p>\u7EBF\u6BB5\u6811\u6784\u5EFA\u597D\u4E4B\u540E\uFF0C\u5C31\u53EF\u4EE5\u5FEB\u901F\u67E5\u627E\u67D0\u4E2A\u533A\u95F4\u7684\u503C\u4E86</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">rangeSum</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u4ECE\u7236\u8282\u70B9\u5411\u4E0B\u627E\u5230\u76EE\u6807\u533A\u95F4\u7684\u503C</span>
<span class="token keyword">function</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> node<span class="token punctuation">,</span> s<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> s <span class="token operator">&amp;&amp;</span> right <span class="token operator">===</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> segmentTree<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> m <span class="token operator">=</span> s <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> m<span class="token punctuation">,</span> node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">range</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">rangeSum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 3~5\u533A\u95F4\u7684\u5143\u7D20\u548C\uFF0C12</span>
</code></pre></div><p>\u6700\u540E\u5C31\u662F\u66F4\u65B0\u67D0\u4E2A\u5143\u7D20\u7684\u503C\u65F6\uFF0C\u66F4\u65B0\u7EBF\u6BB5\u6811\u4E2D\u5BF9\u5E94\u7236\u8282\u70B9\u7684\u503C</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">change</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> val<span class="token punctuation">,</span> node<span class="token punctuation">,</span> s<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">===</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        segmentTree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> m <span class="token operator">=</span> s <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">change</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> val<span class="token punctuation">,</span> node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">change</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> val<span class="token punctuation">,</span> node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    segmentTree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> segmentTree<span class="token punctuation">[</span>node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> segmentTree<span class="token punctuation">[</span>node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u5B8C\u6574\u4EE3\u7801" tabindex="-1">\u5B8C\u6574\u4EE3\u7801 <a class="header-anchor" href="#\u5B8C\u6574\u4EE3\u7801" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">NumArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>segmentTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">NumArray</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">NumArray</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sumRange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">NumArray</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">build</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">===</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>segmentTree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> m <span class="token operator">=</span> s <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>segmentTree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>segmentTree<span class="token punctuation">[</span>node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>segmentTree<span class="token punctuation">[</span>node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">NumArray</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> val<span class="token punctuation">,</span> node<span class="token punctuation">,</span> s<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">===</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>segmentTree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> m <span class="token operator">=</span> s <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> val<span class="token punctuation">,</span> node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> val<span class="token punctuation">,</span> node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>segmentTree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>segmentTree<span class="token punctuation">[</span>node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>segmentTree<span class="token punctuation">[</span>node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">NumArray</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">range</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> node<span class="token punctuation">,</span> s<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> s <span class="token operator">&amp;&amp;</span> right <span class="token operator">===</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>segmentTree<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> m <span class="token operator">=</span> s <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> m<span class="token punctuation">,</span> node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div>`,24),e=[o];function c(u,l,k,r,i,m){return a(),s("div",null,e)}var f=n(t,[["render",c]]);export{b as __pageData,f as default};
