import{_ as e,c as t,o as a,a2 as r}from"./chunks/framework.DLPB9-dE.js";const f=JSON.parse('{"title":"可视化页面工具","description":"","frontmatter":{"title":"可视化页面工具","tags":null},"headers":[],"relativePath":"前端/业务相关/低代码.md","filePath":"前端/业务相关/低代码.md","lastUpdated":1709042257000}'),l={name:"前端/业务相关/低代码.md"},p=r('<p>本文主要介绍可视化页面工具</p><p>参考</p><ul><li><a href="https://www.cnblogs.com/sskyy/p/6496287.html" target="_blank" rel="noreferrer">前端服务化——页面搭建工具的死与生</a>, 写的非常好</li><li><a href="https://github.com/CntChen/cntchen.github.io/issues/15" target="_blank" rel="noreferrer">页面可视化搭建工具前生今世</a>, Pipeline作者写的，分析了业界很多框架，很全面</li></ul><p>参考：</p><ul><li><a href="https://github.com/react-dnd/react-dnd" target="_blank" rel="noreferrer">react-dnd</a> react拖拽组件， <a href="https://juejin.cn/post/6844903801120358407" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903801120358407</a></li></ul><p>类似项目</p><ul><li><a href="https://github.com/MrXujiang/h5-Dooring" target="_blank" rel="noreferrer">h5-dooring</a></li></ul><p>前端lowcode项目</p><ul><li>Outsystems</li><li>Mendix</li><li>iVX | 跨平台lowcode解决方案</li><li>amis | 管理业务先行的B端低代码解决方案，这个挺有意思的</li></ul><h2 id="可视化工具的历史" tabindex="-1">可视化工具的历史 <a class="header-anchor" href="#可视化工具的历史" aria-label="Permalink to &quot;可视化工具的历史&quot;">​</a></h2><p>早在前端刀耕火种的年代，就已经出现了可视化拖拽生成静态页面的工具，如<code>Dreamweaver</code>。</p><p>但由于业务的发展，传统静态页面已经无法承载大量逻辑，大部分网页都是由后端动态生成然后返回给浏览器渲染；再之后就是前后端进一步分离，前端SPA应用迅速发展。</p><p>即便如此，页面可视化搭建工具仍然有用武之地，下面列举了目前业界仍在使用的一些页面可视化工具</p><ul><li><p>微信公众号文章编辑器功能有限，催生了秀米等第三方&quot;所见即所得&quot;的富文本编辑器，可以使用UEditor等开源库，面向的用户主要是运营</p></li><li><p>易企秀、婚礼纪等带动画效果的多屏H5页面制作工具，主要是由平台提供丰富的模板框架，然后提供一些可以修改图片和文字的占位控件，面向的用户主要是无开发能力的平台用户</p></li><li><p>到现在，业界比较流行的<code>lowcode</code>概念，以及对应的各种拖拽组件生成页面工具，面向的用户主要是运营、无前端开发能力的后台同学等</p></li></ul><p>可以看见，上面这些工具跟<code>Dreamweaver</code>最大的区别在于面向的用户不一样，其主要目的是解决非前端开发者制作页面效率的问题</p><p>可视化页面的一些特点</p><ul><li>主要用于展示，业务逻辑和交互逻辑较弱</li><li>迭代快、生命周期较短</li></ul><h2 id="基本思路" tabindex="-1">基本思路 <a class="header-anchor" href="#基本思路" aria-label="Permalink to &quot;基本思路&quot;">​</a></h2><p>前端低代码（Low-Code）平台是一种允许开发者通过图形化用户界面、组件拖拽、少量的手写代码等方式。</p><p>以下是实现前端低代码项目的一般思路：</p><p>图形化界面设计： 提供一个图形化的界面设计工具，允许用户通过拖拽、放置组件来构建应用的用户界面。用户可以在界面设计器中布局页面、添加控件、定义交互等，而不需要手写大量的HTML和CSS代码。</p><p>组件库： 构建一个丰富的组件库，包含各种常见的UI组件和功能组件，用户可以从中选择合适的组件来构建应用。这些组件可以包括表单、列表、图表、地图等，覆盖各种应用场景。</p><p>事件驱动编程： 允许用户通过图形界面设置事件触发和处理逻辑，而无需编写大量的JavaScript代码。例如，通过在界面上选择按钮，然后定义按钮被点击时执行的操作。</p><p>自动生成代码： 在用户完成图形界面设计和事件逻辑的配置后，低代码平台可以自动生成相应的前端代码。这些代码可以是基于流行前端框架（如React、Vue、Angular等）的，并且可以根据用户的需求进行定制。</p><p>数据集成： 提供数据集成和连接的工具，使用户能够轻松地与后端服务、数据库或第三方API进行交互。这可以通过图形界面配置数据源、定义数据模型等方式来实现。</p><p>自定义代码： 为有一定编程经验的开发者提供自定义代码的入口，允许他们通过手写代码来扩展应用的功能。这可以作为低代码平台的补充，满足更高级的定制需求。</p><p>部署和管理： 提供简化的部署流程和应用管理功能，使用户能够轻松地将应用部署到不同的环境，并进行版本管理、监控等操作。</p>',27),i=[p];function o(n,c,s,d,h,u){return a(),t("div",null,i)}const m=e(l,[["render",o]]);export{f as __pageData,m as default};
