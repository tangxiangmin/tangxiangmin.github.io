import{_ as e,c as i,o as a,a2 as s}from"./chunks/framework.DLPB9-dE.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"面试/面试题/Vue.md","filePath":"面试/面试题/Vue.md","lastUpdated":1576499115000}'),t={name:"面试/面试题/Vue.md"},l=s(`<h2 id="需要掌握的东西" tabindex="-1">需要掌握的东西 <a class="header-anchor" href="#需要掌握的东西" aria-label="Permalink to &quot;需要掌握的东西&quot;">​</a></h2><ul><li>基本使用及相关技术栈</li><li>响应式原理</li><li>VNode</li><li>组件系统，以及如何合理地设计组件</li><li>事件系统，手动实现 on,emit,off,once</li><li>性能优化（组件懒加载等）</li><li>Vue-router、Vuex</li><li>SSR原理及实现</li><li>Vue devtools</li></ul><h2 id="一些关于vue的面试题" tabindex="-1">一些关于Vue的面试题 <a class="header-anchor" href="#一些关于vue的面试题" aria-label="Permalink to &quot;一些关于Vue的面试题&quot;">​</a></h2><p>参考</p><ul><li><a href="https://juejin.im/post/5d41eec26fb9a06ae439d29f" target="_blank" rel="noreferrer">面试必备的13道可以举一反三的Vue面试题</a></li><li><a href="https://juejin.im/post/59ffb4b66fb9a04512385402" target="_blank" rel="noreferrer">Vue面试题汇总</a></li><li><a href="https://www.jianshu.com/p/e54a9a34a773" target="_blank" rel="noreferrer">整理前端面试题(十一): Vue面试题合集</a></li></ul><h3 id="谈谈你对于mvvm框架的理解" tabindex="-1">谈谈你对于MVVM框架的理解 <a class="header-anchor" href="#谈谈你对于mvvm框架的理解" aria-label="Permalink to &quot;谈谈你对于MVVM框架的理解&quot;">​</a></h3><p>参考: <a href="https://juejin.im/post/5cb706efe51d456e6865930a" target="_blank" rel="noreferrer">https://juejin.im/post/5cb706efe51d456e6865930a</a></p><p>把系统分为三个基本部分：模型（Model）、视图（View）和视图模型（ViewModel）。</p><p>其核心是提供对View 和 ViewModel 的双向数据绑，这使得ViewModel 的状态改变可以自动传递给 View，自动修改可以避免手动同步更新Model和View无需手动操作复杂的DOM API</p><p>数据绑定可以认为是Observer模式或者是Publish/Subscribe模式，原理都是为了用一种统一的集中的方式实现频繁需要被实现的数据更新问题。</p><p>比起MVP，MVVM不仅简化了业务与界面的依赖关系，还优化了数据频繁更新的解决方案，甚至可以说提供了一种有效的解决模式。</p><h3 id="new-vue-options-中发生了什么操作" tabindex="-1">new Vue(options)中发生了什么操作 <a class="header-anchor" href="#new-vue-options-中发生了什么操作" aria-label="Permalink to &quot;new Vue(options)中发生了什么操作&quot;">​</a></h3><ul><li>初始化，调用this._init进行初始化， <ul><li>包括生命周期、事件、 props、 methods、 data、 computed 与 watch 等，</li><li>此外最重要的是通过Object.defineProperty设置data参数属性setter与getter函数，用来用来实现响应式数据以及依赖收集</li></ul></li><li>模板编译，如果传入的是template而不是render函数，则会进行模板编译过程。 <ul><li>parse，通过正则解析模板，生成AST</li><li>optimize，优化AST，包括标记静态节点，为后续path操作提供优化基础</li><li>generate，将AST转换成渲染函数</li></ul></li><li>渲染页面，调用渲染函数，根据Vnode生成DOM节点，然后挂载到页面上</li><li>在这个\b过程中会调用对应的生命周期钩子函数</li><li>更新页面，当data发生变化时，依赖收集执行的Dep会通知相关watcher，更新视图，通过\bdiff算法按需更新Vnode，重新渲染相关节点，更新页面</li></ul><h3 id="简述vue响应式系统的原理" tabindex="-1">简述Vue响应式系统的原理 <a class="header-anchor" href="#简述vue响应式系统的原理" aria-label="Permalink to &quot;简述Vue响应式系统的原理&quot;">​</a></h3><p>首先需要监听数据属性的变化。</p><p>然后需要为每个属性收集依赖，方便在该属性更新的时候通知执行相关逻辑，这是一个发布订阅系统</p><ul><li>Dep在observer数据时，在getter中收集依赖watcher，在setter中通过通知watcher，</li><li>Watcher是一个视图更新、$watch注册回调等 进行抽象封装的一个类，当数据更新时，只需要调用watcher.update即可，至于具体执行什么操作，由初始化时注册的watcher.cb开始</li></ul><p>具体执行流程如下</p><ul><li>初始化时会递归遍历<code>data</code>数据的属性，通过<code>Object.defineProperty</code>劫持属性访问描述符<code>set</code>和<code>get</code>，通过闭包为每个属性都维护了一个<code>Dep</code>对象</li><li>每个组件在执行<code>vm.$mount</code>时，都初始化了一个处理视图更新的Wathcer，同时注册<code>updateComponent</code>回调</li><li>在调用render函数时，使用到的属性将触发get，从而调用<code>dep.depend</code>收集Watcher；</li><li>当属性更新时，将触发set，调用<code>dep.notify</code>通知Watcher，并执行watcher回调<code>updateComponent</code>，重新渲染组件</li></ul><h3 id="如果让你用proxy实现vue的响应式系统-你会如何处理" tabindex="-1">如果让你用proxy实现Vue的响应式系统，你会如何处理 <a class="header-anchor" href="#如果让你用proxy实现vue的响应式系统-你会如何处理" aria-label="Permalink to &quot;如果让你用proxy实现Vue的响应式系统，你会如何处理&quot;">​</a></h3><p>Proxy 的优势如下:</p><ul><li>Proxy 可以直接监听对象而非属性, 因此可以直接监听对象和数组的变；</li><li>Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；</li><li>Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；</li><li>Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；</li></ul><p>Object.defineProperty 的优势如下:</p><ul><li>兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。</li></ul><h3 id="vue和angularjs的双向绑定实现有什么区别" tabindex="-1">Vue和AngularJS的双向绑定实现有什么区别 <a class="header-anchor" href="#vue和angularjs的双向绑定实现有什么区别" aria-label="Permalink to &quot;Vue和AngularJS的双向绑定实现有什么区别&quot;">​</a></h3><p>Vue是通过<code>Object.defineProperty</code>劫持数据的访问描述符来实现的</p><p>AngularJS是在恰当的时机从 <code>$rootScope</code> 开始遍历所有<code>$scope</code>，检查它们上面的属性值是否有变化，如果有变化，就用一个变量dirty记录为true，再次进行遍历，如此往复，直到某一个遍历完成时，这些$scope的属性值都没有变化时，结束遍历。由于使用了一个dirty变量作为记录，因此被称为脏检查机制</p><h3 id="vue-组件-data-为什么必须是函数" tabindex="-1">Vue 组件 data 为什么必须是函数 <a class="header-anchor" href="#vue-组件-data-为什么必须是函数" aria-label="Permalink to &quot;Vue 组件 data 为什么必须是函数&quot;">​</a></h3><ul><li>每个组件都是 Vue 的实例。</li><li>组件共享 data 属性，当 data 的值是同一个引用类型的值时，改变其中一个会影响其他。</li></ul><h3 id="react和vue有什么区别" tabindex="-1">React和Vue有什么区别 <a class="header-anchor" href="#react和vue有什么区别" aria-label="Permalink to &quot;React和Vue有什么区别&quot;">​</a></h3><p>参考尤大在知乎上的<a href="https://www.zhihu.com/question/31585377" target="_blank" rel="noreferrer">回答</a>。</p><p><strong>项目规模</strong></p><p>React 配合严格的 Flux 架构，适合超大规模多人协作的复杂项目。理论上 Vue 配合类似架构也可以胜任这样的用例，但缺少类似 Flux 这样的官方架构。</p><p>小快灵的项目上，Vue 和 React 的选择更多是开发风格的偏好。对于需要对 DOM 进行很多自定义操作的项目，Vue 的灵活性优于 React。</p><p><strong>开发风格的偏好</strong></p><p>React 推荐的做法是 JSX + inline style，也就是把 HTML 和 CSS 全都整进 JavaScript 了。Vue 的默认 API 是以简单易上手为目标，但是进阶之后推荐的是使用 webpack + vue-loader 的单文件组件格式：</p><p>JSX 在逻辑表达能力上虽然完爆模板，但是很容易写出凌乱的 render 函数，不如模板看起来一目了然。当然这里也有个人偏好的问题</p><h3 id="vue生命周期的原理是什么" tabindex="-1">Vue生命周期的原理是什么 <a class="header-anchor" href="#vue生命周期的原理是什么" aria-label="Permalink to &quot;Vue生命周期的原理是什么&quot;">​</a></h3><p>Vue通过<code> callHook (vm: Component, hook: string)</code>方法，在程序运行的某些特定时刻，调用<code>vm.$options[hook]</code>方法，即对应的生命周期函数。</p><p>生命周期函数，实际上就是在代码运行的不同的阶段调用预先传入的配置函数。因为框架在运行期间就像是一个黑盒，通过钩子函数，我们可以在外部获取到程序在某个具体时刻的代码和数据。</p><h3 id="为什么要求组件模板只能有一个根元素" tabindex="-1">为什么要求组件模板只能有一个根元素 <a class="header-anchor" href="#为什么要求组件模板只能有一个根元素" aria-label="Permalink to &quot;为什么要求组件模板只能有一个根元素&quot;">​</a></h3><p>从概念上来说，虚拟DOM组件树由多个子树构造，一棵子树代表一个子组件，且一棵树只能有一个根节点。一个组件节点可以看做是tag比较特殊的VNode，其组件实例为<code>vnode.componentInstance</code>，DOM节点为<code>vnode.elm</code>。</p><p>从实现上来说，当渲染页面时调用<code>patch</code>函数，是从旧的根节点与新的根节点进行对比的，如果有多个节点，显然是不正确的。React中实现了Fragment的技术，Vue中并没有类似的实现</p><h3 id="为什么vue中可以通过this访问到和修改this-data的值" tabindex="-1">为什么Vue中可以通过<code>this</code>访问到和修改<code>this.$data</code>的值 <a class="header-anchor" href="#为什么vue中可以通过this访问到和修改this-data的值" aria-label="Permalink to &quot;为什么Vue中可以通过\`this\`访问到和修改\`this.$data\`的值&quot;">​</a></h3><p>这是通过数据代理实现的，原理是修改data对应的<code>getter</code>和<code>setter</code>并代理到this上</p><h3 id="在使用计算属性的时-函数名和data数据源中的数据可以同名吗" tabindex="-1">在使用计算属性的时，函数名和data数据源中的数据可以同名吗 <a class="header-anchor" href="#在使用计算属性的时-函数名和data数据源中的数据可以同名吗" aria-label="Permalink to &quot;在使用计算属性的时，函数名和data数据源中的数据可以同名吗&quot;">​</a></h3><p>Vue初始化属性<code>initState</code>中的顺序是：<code>props</code>、<code>methods</code>、<code>data</code>、<code>computed</code>、<code>watch</code>。</p><p>在<code>initComputed</code>方法中，会检测<code>key in vm</code>，只有key不在当前组件实例上时，才会注册。由于先使用了<code>initData</code>代理data数据源中的数据，如果在<code>computed</code>中定义了与data或props中相同的键名，则会提示错误信息</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> computed) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vm)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      defineComputed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, key, userDef)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vm.$data) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`The computed property &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot; is already defined in data.\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, vm)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (vm.$options.props </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vm.$options.props) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`The computed property &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot; is already defined as a prop.\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, vm)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="keep-alive的实现原理和相关的生命周期" tabindex="-1">keep-alive的实现原理和相关的生命周期 <a class="header-anchor" href="#keep-alive的实现原理和相关的生命周期" aria-label="Permalink to &quot;keep-alive的实现原理和相关的生命周期&quot;">​</a></h3><p><code>keep-alive</code>是一个内置组件，其原理就是通过维护一个cache，在render函数中根据key返回缓存的vnode，来实现组件的持久化。</p><p>相关的生命钩子函数</p><ul><li><code>activated</code>，在patch操作完成后节点需要插入的<code>hook.insert</code>阶段，keep-alive 组件激活时调用</li><li><code>deactivated</code>，在patch操作完成后节点需要被移除的<code>hook.destroy</code>阶段，在keep-alive 组件停用时调用</li></ul><h3 id="vue中diff算法key的作用" tabindex="-1">Vue中diff算法key的作用 <a class="header-anchor" href="#vue中diff算法key的作用" aria-label="Permalink to &quot;Vue中diff算法key的作用&quot;">​</a></h3><p>Vue在比较两个a、b节点时，会优先判断<code>a.key === b.key</code>，只有当他们相同、或者均为undefined时，才比较<code>tag</code>类型</p><p>在首首、尾尾、首尾、尾首四种比较均布满足的情况下，Vue会尝试尽量在旧节点找到一个可以复用的DOM实例，使用key可以构建一个映射，快速找到目标节点，否则需要每次循环查找旧节点中tag相同的节点进行对比进行对比。</p><h3 id="vue中的错误处理机制" tabindex="-1">Vue中的错误处理机制 <a class="header-anchor" href="#vue中的错误处理机制" aria-label="Permalink to &quot;Vue中的错误处理机制&quot;">​</a></h3><p>可以使用<code>errorCaptured</code>生命钩子函数，该方法会在子组件发生错误时调用，并通过<code>while(cur = cur.$parent)</code>依次向父节点冒泡，可以通过返回false阻止错误继续向上传播</p><h3 id="vue变量名如果以-、-开头的属性会发生什么问题-怎么访问到它们的值" tabindex="-1">vue变量名如果以_、$开头的属性会发生什么问题？怎么访问到它们的值？ <a class="header-anchor" href="#vue变量名如果以-、-开头的属性会发生什么问题-怎么访问到它们的值" aria-label="Permalink to &quot;vue变量名如果以_、$开头的属性会发生什么问题？怎么访问到它们的值？&quot;">​</a></h3><p>在<code>initData</code>中，会通过<code>isReserved</code>判断key是否由<code>_</code>或<code>$</code>开头，如果是，则不会执行<code>proxy</code>进行数据代理，因此无法通过<code>this._xx</code>访问，只能通过<code>this.$data.xx</code>访问。</p><h3 id="说下-attrs和-listeners的使用场景" tabindex="-1">说下$attrs和$listeners的使用场景 <a class="header-anchor" href="#说下-attrs和-listeners的使用场景" aria-label="Permalink to &quot;说下$attrs和$listeners的使用场景&quot;">​</a></h3><p><code>$attrs</code>：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class 和 style 除外 ) <code>$listeners</code>：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。</p><ul><li>用于创建高级组件，如利用<code>$listeners</code>实现事件节流</li><li>隔代组件之间的通信</li></ul><h3 id="vue组件之间的通信" tabindex="-1">Vue组件之间的通信 <a class="header-anchor" href="#vue组件之间的通信" aria-label="Permalink to &quot;Vue组件之间的通信&quot;">​</a></h3><ul><li>props / $emit 父子组件通信</li><li>ref 与 $parent / $children 直接获取父子组件的引用</li><li>EventBus （$emit / $on）通过事件订阅通信</li><li>$attrs/$listeners 适用于 隔代组件通信</li><li>provide / inject 适用于 隔代组件通信，祖先组件向其后代组件注入依赖</li><li>Vuex 全局状态管理</li></ul><h2 id="源码细节" tabindex="-1">源码细节 <a class="header-anchor" href="#源码细节" aria-label="Permalink to &quot;源码细节&quot;">​</a></h2><h3 id="生命周期钩子函数" tabindex="-1">生命周期钩子函数 <a class="header-anchor" href="#生命周期钩子函数" aria-label="Permalink to &quot;生命周期钩子函数&quot;">​</a></h3><p><a href="https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA" target="_blank" rel="noreferrer">官网上的这张图片介绍的十分清楚</a></p><blockquote><p>vue 父子组件嵌套时，组件内部的各个生命周期钩子触发先后顺序?</p></blockquote><p>从源码分析<code>patch</code>函数时可以发现，先创建父组件，遇见子组件就创建子组件，然后将子组件挂载到父组件，最后执行父组件的挂载操作</p><p>在初始化和更新时会触发对应的生命周期钩子函数</p><h3 id="数据代理" tabindex="-1">数据代理 <a class="header-anchor" href="#数据代理" aria-label="Permalink to &quot;数据代理&quot;">​</a></h3><p>Vue中可以通过<code>this</code>访问到和修改<code>this.$data</code>的值，这是通过代理实现的，原理是修改对应的<code>getter</code>和<code>setter</code></p><p>在初始化时的<code>initData</code>方法中，可以看见遍历了<code>options.data</code>的key值，然后依次调用了<code> proxy</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sourceKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sharedPropertyDefinition.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> proxyGetter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[sourceKey][key]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sharedPropertyDefinition.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> proxySetter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[sourceKey][key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, key, sharedPropertyDefinition)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过这种方式，就可以实现通过<code>this.xxx</code>可以访问到<code>this._data.xxx</code>的方式了。</p><h3 id="computed-实现" tabindex="-1">computed 实现 <a class="header-anchor" href="#computed-实现" aria-label="Permalink to &quot;computed 实现&quot;">​</a></h3><p>理解computed的两个需求</p><ul><li>建立与其他属性（如：data、 Store）的联系；</li><li>属性改变后，通知计算属性重新计算。</li></ul><p>实现方式</p><ul><li>初始化 data， 使用 Object.defineProperty 把这些属性全部转为 getter/setter。</li><li>初始化 computed, 遍历 computed 里的每个属性，每个 computed 属性都是一个 watch 实例。每个属性提供的函数作为属性* 的 getter，使用 Object.defineProperty 转化。</li><li>Object.defineProperty getter 依赖收集。用于依赖发生变化时，触发属性重新计算。</li><li>若出现当前 computed 计算属性嵌套其他 computed 计算属性时，先进行其他的依赖收集，这是在更新队列中通过<code>watcher.id</code>排序实现的。</li></ul><h3 id="complier-实现" tabindex="-1">complier 实现 <a class="header-anchor" href="#complier-实现" aria-label="Permalink to &quot;complier 实现&quot;">​</a></h3><p>理解主要过程</p><ul><li>parse 过程，将 template 利用正则转化成 AST 抽象语法树。</li><li>optimize 过程，标记静态节点，后 diff 过程跳过静态节点，提升性能。</li><li>generate 过程，生成 render 字符串。</li></ul><h3 id="ssr" tabindex="-1">SSR <a class="header-anchor" href="#ssr" aria-label="Permalink to &quot;SSR&quot;">​</a></h3><p>通过虚拟DOM技术，可以实现服务端渲染。</p><p>参考：</p><ul><li><a href="https://juejin.im/post/5a9ca40b6fb9a028b77a4aac" target="_blank" rel="noreferrer">https://juejin.im/post/5a9ca40b6fb9a028b77a4aac</a></li></ul><h3 id="v-model的实现原理" tabindex="-1">v-model的实现原理 <a class="header-anchor" href="#v-model的实现原理" aria-label="Permalink to &quot;v-model的实现原理&quot;">​</a></h3><p><code>v-model</code>是一个内置指令实现，其本质是语法糖，封装了父子组件的事件通信，父组件传入特定的props字段<code>value</code>，子组件触发事件<code>input</code>通知父组件修改<code>value</code>。</p><p><code>input</code>事件处理函数内部调用<code>vm.$set</code>完成数据的更新。该事件处理函数在编译<code>render</code>函数时，通过生成<code>el.model</code>表达式然后由Vue自动注册。</p><p>因此组件只需要处理何时触发<code>input</code>执行<code>$set</code>逻辑即可</p><ul><li>对于原生表单元素如<code>input</code>（<code>textarea</code>标签实现相同，<code>select</code>略有不同），在directive触发<code>inserted</code>时，监听变化事件如<code>change</code>事件，并在事件回调中触发<code>input</code>事件</li><li>对于组件而言，需要组件内部自己处理触发<code>input</code>事件的逻辑</li></ul><h3 id="css-scoped是如何在vue中实现的" tabindex="-1">css scoped是如何在Vue中实现的 <a class="header-anchor" href="#css-scoped是如何在vue中实现的" aria-label="Permalink to &quot;css scoped是如何在Vue中实现的&quot;">​</a></h3><p>在patch节点的<code>createElm</code>方法中，如果vnode.tag存在，则会调用<code>setScope(vnode) </code>方法，该方法会根据<code>vnode.fnScopeId</code>为DOM实例设置一个<code>@styleScope</code>属性为<code>scopeId</code>，该属性可以用来实现<code>css scoped</code></p><h3 id="vue项目性能优化" tabindex="-1">Vue项目性能优化 <a class="header-anchor" href="#vue项目性能优化" aria-label="Permalink to &quot;Vue项目性能优化&quot;">​</a></h3><p>参考：<a href="https://juejin.im/post/5d548b83f265da03ab42471d" target="_blank" rel="noreferrer">Vue 项目性能优化</a></p><p>可以从下面几个方面入手</p><ul><li><code>v-if</code>和<code>v-show</code>的区别</li><li>使用<code>Object.freeze</code>避免数据劫持</li><li>在组件卸载前移除定时器、事件订阅等</li><li>路由懒加载，通过异步组件实现</li><li>第三方库按需引入，避免打包整个库文件</li><li>模板预编译，在打包时就将其转换为render函数</li><li>可以使用<strong>窗口化</strong>来进行优化，只需要渲染少部分区域的内容，减少重新渲染组件和创建 dom 节点的时间，参考:<a href="https://github.com/tangbc/vue-virtual-scroll-list" target="_blank" rel="noreferrer">vue-virtual-scroll-list</a></li></ul><h3 id="vue-functional组件" tabindex="-1">Vue functional组件 <a class="header-anchor" href="#vue-functional组件" aria-label="Permalink to &quot;Vue functional组件&quot;">​</a></h3><h3 id="nexttick为什么优先采用微任务" tabindex="-1">nextTick为什么优先采用微任务 <a class="header-anchor" href="#nexttick为什么优先采用微任务" aria-label="Permalink to &quot;nextTick为什么优先采用微任务&quot;">​</a></h3><p>在<code>/src/core/util/next-tick.js</code>中，<code>timerFunc</code>的实现为 Promise &gt; MutationObserver &gt; setImmediate &gt; setTimeout。</p><p>使用微任务可以在完成下一个宏任务后进快地调用微任务，Vue中的nextTick中需要执行<code>watcher.run</code>方法，可能需要更新页面，因此使用微任务更加合适。</p>`,103),n=[l];function o(d,r,h,p,c,k){return a(),i("div",null,n)}const y=e(t,[["render",o]]);export{E as __pageData,y as default};
