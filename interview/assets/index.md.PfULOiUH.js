import{_ as a,c as n,o as e,a2 as s}from"./chunks/framework.DLPB9-dE.js";const m=JSON.parse('{"title":"前端知识点汇总","description":"","frontmatter":{},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":1709648798000}'),p={name:"index.md"},t=s(`<h1 id="前端知识点汇总" tabindex="-1">前端知识点汇总 <a class="header-anchor" href="#前端知识点汇总" aria-label="Permalink to &quot;前端知识点汇总&quot;">​</a></h1><p>日常收集整理的的前端知识点和面试题。</p><p>面试的信心来自于自身扎实的基础，切勿急功近利，好逸恶劳~自勉之。</p><h2 id="获取知识" tabindex="-1">获取知识 <a class="header-anchor" href="#获取知识" aria-label="Permalink to &quot;获取知识&quot;">​</a></h2><p>碎片化的知识学得快，忘得也快。</p><p>有的知识可以通过阅读的方式掌握</p><p>有的知识需要经过大量的练习才能掌握</p><p>有的知识需要经过深层次的思考才能掌握</p><p>我最大的问题在于喜欢闭门造车，埋头一通苦干之后才发现已经有很多现成的东西。有效区分知识分层，才能更高效地学习。</p><h2 id="关于全栈" tabindex="-1">关于全栈 <a class="header-anchor" href="#关于全栈" aria-label="Permalink to &quot;关于全栈&quot;">​</a></h2><p>技术人员的价值是更快更好地搞定工作，全栈是为了更好的协作。啥都会啥都不精，是会被淘汰的</p><p>所以不要把自己局限在前端、后端或者客户端，亦或是全栈，我只想安安静静的写代码。</p><h2 id="gitbook" tabindex="-1">gitbook <a class="header-anchor" href="#gitbook" aria-label="Permalink to &quot;gitbook&quot;">​</a></h2><p>新版本使用<code>vitepress</code>构建，提供<a href="https://tangxiangmin.github.io/interview/index.html" target="_blank" rel="noreferrer">预览模式</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git clone git@github.com:tangxiangmin/interview.git</span></span>
<span class="line"><span>cd interview</span></span>
<span class="line"><span></span></span>
<span class="line"><span>npm i </span></span>
<span class="line"><span></span></span>
<span class="line"><span># vitepress开发和打包</span></span>
<span class="line"><span>npm run dev</span></span>
<span class="line"><span>npm run build</span></span>
<span class="line"><span>npm run serve</span></span></code></pre></div>`,15),i=[t];function o(r,l,c,d,h,_){return e(),n("div",null,i)}const g=a(p,[["render",o]]);export{m as __pageData,g as default};
