import{_ as a,c as e,o as t,a2 as r}from"./chunks/framework.DLPB9-dE.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"App/GUI应用的一些共性.md","filePath":"App/GUI应用的一些共性.md","lastUpdated":1683863238000}'),o={name:"App/GUI应用的一些共性.md"},p=r('<p>不管是移动应用、桌面引用还是web应用，都存在很多共性开发</p><h2 id="架构" tabindex="-1">架构 <a class="header-anchor" href="#架构" aria-label="Permalink to &quot;架构&quot;">​</a></h2><p>GUI主要是构建用户与数据之前的交互界面，用户-界面-数据三者之间有各种各样的逻辑。如何保证整个应用的稳定性和扩展性就是架构的重点</p><p>MVC、MVP、MVVM、MVI等</p><h2 id="界面组件" tabindex="-1">界面组件 <a class="header-anchor" href="#界面组件" aria-label="Permalink to &quot;界面组件&quot;">​</a></h2><p>DRY原则，为了缩小每次改动的范围，将一些重复的地方封装成组件，然后使用组件来组装一个完整的应用</p><p>组件就面临着props入参、event通信、全局状态等要处理的问题</p><h2 id="路由管理" tabindex="-1">路由管理 <a class="header-anchor" href="#路由管理" aria-label="Permalink to &quot;路由管理&quot;">​</a></h2><p>大部分应用需要使用两个以上的页面来承接业务，多个页面之间的跳转、通信、数据流转等都是GUI应用需要解决的</p><h2 id="网络通信" tabindex="-1">网络通信 <a class="header-anchor" href="#网络通信" aria-label="Permalink to &quot;网络通信&quot;">​</a></h2><p>C/S、B/S结构下，大部分应用都需要与Server服务端通信，所幸的是有很多非常便利的HTTP工具库</p><h2 id="本地存储" tabindex="-1">本地存储 <a class="header-anchor" href="#本地存储" aria-label="Permalink to &quot;本地存储&quot;">​</a></h2><p>一些持久化的非服务端交互数据，可以放在本地文件甚至本地数据库中</p><h2 id="构建与发布" tabindex="-1">构建与发布 <a class="header-anchor" href="#构建与发布" aria-label="Permalink to &quot;构建与发布&quot;">​</a></h2><p>将源代码发布成可以供他人使用的成品</p>',15),i=[p];function n(h,s,l,_,d,c){return t(),e("div",null,i)}const f=a(o,[["render",n]]);export{m as __pageData,f as default};
