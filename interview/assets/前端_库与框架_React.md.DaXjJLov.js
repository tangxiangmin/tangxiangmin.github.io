import{_ as s,c as i,o as a,a2 as e}from"./chunks/framework.DLPB9-dE.js";const g=JSON.parse('{"title":"React","description":"","frontmatter":{},"headers":[],"relativePath":"前端/库与框架/React.md","filePath":"前端/库与框架/React.md","lastUpdated":1683863238000}'),t={name:"前端/库与框架/React.md"},l=e(`<h1 id="react" tabindex="-1">React <a class="header-anchor" href="#react" aria-label="Permalink to &quot;React&quot;">​</a></h1><p>参考</p><ul><li><a href="https://www.shymean.com/article/%E3%80%8AReact%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0" target="_blank" rel="noreferrer">《React设计模式与最佳实践》读书笔记</a></li></ul><p>主要需要掌握下面知识点</p><ul><li>Virtual DOM，JSX, React.createElement</li><li>组件组件生命周期</li><li>Fiber、diff算法</li><li>React-Router</li><li>状态管理<code>Flux</code>、<code>Redux</code>和<code>react-redux</code>、<code>redux-saga</code>、<code>Mobx</code></li></ul><h2 id="虚拟dom优缺点" tabindex="-1">虚拟DOM优缺点 <a class="header-anchor" href="#虚拟dom优缺点" aria-label="Permalink to &quot;虚拟DOM优缺点&quot;">​</a></h2><p>优点</p><ul><li>避免手动操作DOM节点，提高开发效率</li><li>通过diff可以保证性能下限</li><li>跨平台，虚拟DOM是UI的抽象，与平台无关，可以用于SSR、小程序和Native平台</li></ul><p>缺点</p><ul><li>额外的计算，增加内存消耗，在某些追求性能极致的地方比不上手动操作DOM</li></ul><h2 id="class组件的生命周期" tabindex="-1">Class组件的生命周期 <a class="header-anchor" href="#class组件的生命周期" aria-label="Permalink to &quot;Class组件的生命周期&quot;">​</a></h2><p>从横向看，react 分为三个阶段：</p><ul><li>创建时 <ul><li>constructor() - 类构造器初始化，可用于初始化state</li><li>static getDerivedStateFromProps() - 组件初始化时主动触发</li><li>render() - 递归生成虚拟 DOM</li><li>componentDidMount() - 完成首次 DOM 渲染，组件挂载后触发，表示组件及其所有子组件被正确渲染</li></ul></li><li>更新时 <ul><li>static getDerivedStateFromProps() - 每次 render() 之前执行</li><li>shouldComponentUpdate() - 校验是否需要执行更新操作，可以通过该函数决定是否重新执行渲染</li><li>render() - 递归生成虚拟 DOM</li><li>getSnapshotBeforeUpdate() - 在渲染真实 DOM 之前</li><li>componentDidUpdate() - 完成 DOM 渲染，将在渲染完成后在每个重新渲染周期中被触发</li></ul></li><li>卸载时 <ul><li>componentWillUnmount() - 组件销毁之前被直接调用</li></ul></li></ul><p>官方计划在React17版本中移除之前版本中componentWillMount、componentWillReceiveProps、componentWillUpdate三个钩子</p><h2 id="fiber" tabindex="-1">Fiber <a class="header-anchor" href="#fiber" aria-label="Permalink to &quot;Fiber&quot;">​</a></h2><p>之前的递归diff会导致长时间占用浏览器线程，在此期间用户交互无法得到反馈。</p><p>Fiber 把当前需要执行的任务分成一个个子任务，安排优先级，然后依次处理，每过一段时间（非常短，毫秒级）就会暂停当前的任务，查看有没有优先级较高的任务，然后暂停（也可能会完全放弃）掉之前的执行结果，跳出到下一个子任务。同时 Fiber 还做了一些优化，可以保持住之前运行的结果以到达复用目的。</p><p>所谓高优先级的任务指的是可能会影响用户体验的任务，因此从宏观上来看，尽管不停的检查切换状态可能会带来性能损耗，但提高了用户的流畅体验，不会造成浏览器卡死。基于这个原因，</p><ul><li>在React能够知道的运行上下文中（如合成事件和生命周期函数中）是“异步”的，</li><li>而在在原生事件和setTimeout 中由于无法知道当前运行上下文，为了保证视图正确性，都是同步的。</li></ul><blockquote><p>React 在哪个阶段发起 XhrHttpRequest 比较合适？</p></blockquote><p>React 下一代调和算法 Fiber 会通过开始或停止渲染的方式优化应用性能，其会影响到 componentWillMount 的触发次数。对于 componentWillMount 这个生命周期函数的调用次数会变得不确定，React 可能会多次频繁调用 componentWillMount。如果我们将 AJAX 请求放到 componentWillMount 函数中，那么显而易见其会被触发多次，自然也就不是好的选择。</p><p>在后续的版本中，上面提到的生命周期函数可能会被移除。</p><h2 id="合成事件" tabindex="-1">合成事件 <a class="header-anchor" href="#合成事件" aria-label="Permalink to &quot;合成事件&quot;">​</a></h2><p>参考：<a href="https://zh-hans.reactjs.org/docs/events.html" target="_blank" rel="noreferrer">合成事件</a></p><p>事件处理函数接收到的 SyntheticEvent 是合并而来。这意味着 SyntheticEvent 对象可能会被重用，而且在事件回调函数被调用后，所有的属性都会无效。出于性能考虑，你不能通过异步访问事件（除非先使用<code>event.persist()</code>将事件从池中移除）</p><h2 id="组件封装" tabindex="-1">组件封装 <a class="header-anchor" href="#组件封装" aria-label="Permalink to &quot;组件封装&quot;">​</a></h2><h3 id="组件通信" tabindex="-1">组件通信 <a class="header-anchor" href="#组件通信" aria-label="Permalink to &quot;组件通信&quot;">​</a></h3><ul><li>父子组件: prop + 回调</li><li>兄弟组件: 状态提升到公共父组件</li><li>跨级通信: Context</li><li>eventBus</li><li>复杂业务，全局状态管理</li></ul><h3 id="一些内置接口及组件" tabindex="-1">一些内置接口及组件 <a class="header-anchor" href="#一些内置接口及组件" aria-label="Permalink to &quot;一些内置接口及组件&quot;">​</a></h3><ul><li>ref:提供了访问DOM节点或组件实例的方式</li><li>Fragments:允许在render函数或函数组件中返回子组件列表，而非单个子组件</li><li>Portal:供了一种将子节点渲染到存在于父组件以外的 DOM 节点的方案</li></ul><h2 id="组件-逻辑复用" tabindex="-1">组件/逻辑复用 <a class="header-anchor" href="#组件-逻辑复用" aria-label="Permalink to &quot;组件/逻辑复用&quot;">​</a></h2><h3 id="高阶组件" tabindex="-1">高阶组件 <a class="header-anchor" href="#高阶组件" aria-label="Permalink to &quot;高阶组件&quot;">​</a></h3><p>通过高阶组件进行属性代理和反向继承</p><p>属性代理可以为组件传入一些公共的props，进而复用相关逻辑</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loading </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    hide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addLoading</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Comp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    reaturn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Comp {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loading}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>反向继承可以实现拦截生命周期、state、渲染过程等需求，参考<a href="https://www.jianshu.com/p/49e3516a710b" target="_blank" rel="noreferrer">react反向继承注意点</a></p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Button1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentDidMount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;didMount1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;render1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 高阶组件函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Hoc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> WrappedComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WrappedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      num: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    componentDidMount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 修改劫持了WrappedComponent的同名生命周期函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;didMountHoc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>高阶组件也存在一些缺点</p><ul><li>会导致组件嵌套很深, 对于单个属性难以溯源，且存在属性覆盖问题</li><li>ref透传问题，可以通过<code>React.forwardRef</code>解决</li></ul><h3 id="渲染属性" tabindex="-1">渲染属性 <a class="header-anchor" href="#渲染属性" aria-label="Permalink to &quot;渲染属性&quot;">​</a></h3><p>参考：<a href="https://zh-hans.reactjs.org/docs/render-props.html#___gatsby" target="_blank" rel="noreferrer">render props 官方文档</a></p><blockquote><p>render prop 是一个用于告知组件需要渲染什么内容的函数 prop，可以解决高级组件存在的问题</p></blockquote><p>类似于slot的概念，可以在父组件中子组件中特定的渲染逻辑，在子组件中可以调用该方法并传入子组件的state，并将返回值插入到组件树中</p><p>缺点在于</p><ul><li>使用比较麻烦，存在函数嵌套的问题</li></ul><h3 id="react-hooks" tabindex="-1">React Hooks <a class="header-anchor" href="#react-hooks" aria-label="Permalink to &quot;React Hooks&quot;">​</a></h3><p><code>hooks</code> 让函数式组件拥有 <code>state</code> 和类生命周期这两个功能</p><p>参考</p><ul><li><a href="https://zhuanlan.zhihu.com/p/50597236" target="_blank" rel="noreferrer">一篇文章理解React Hooks</a></li><li><a href="https://zh-hans.reactjs.org/docs/hooks-intro.html" target="_blank" rel="noreferrer">官方文档</a></li><li><a href="https://segmentfault.com/a/1190000016950339" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000016950339</a></li><li><a href="https://www.jianshu.com/p/ecc6280f31b9" target="_blank" rel="noreferrer">https://www.jianshu.com/p/ecc6280f31b9</a></li></ul><p>为什么要使用Hooks？Hook实现state组件之间的状态逻辑复用</p><ul><li>通过render props或者高阶组件，会导致组件嵌套很深</li><li>函数式组件方便测试，但由于需求的变更可能导致我们需要将其改写class组件</li><li>class组件的this需要很小心使用</li></ul><p>Hook的使用点</p><ul><li>Hook 将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据），从而实现状态复用</li><li>Hook 是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的函数</li><li>Hook 允许我们按照代码的用途分离他们，而不是按照生命周期将不同作用的代码堆积到同一个生命周期函数中</li></ul><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React, { useState } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 声明一个新的叫做 “count” 的 state 变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;You clicked {count} times&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}&gt;Click me&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>React 假设当你多次调用 useState 的时候，你能保证每次渲染时它们的调用顺序是不变的。这一点十分重要!!</p><ul><li><a href="https://zh-hans.reactjs.org/docs/hooks-state.html" target="_blank" rel="noreferrer"><code>useState</code></a>相当于为函数组件添加了state</li><li><code>useEffect</code>相当于在告诉 React 在完成对 DOM 的更改后运行你的“副作用”函数，使用Hook可以把组件内相关的副作用组织在一起</li><li><code>useContext</code>订阅React的Context</li><li><code>useReducer</code>通过 reducer 来管理组件本地的复杂 state</li><li>更多API用法可以参考<a href="https://zh-hans.reactjs.org/docs/hooks-reference.html" target="_blank" rel="noreferrer">Hook API</a></li></ul><p>Hook使用注意事项：</p><ul><li>只能在函数最外层调用 Hook。不要在循环、条件判断或者子函数中调用，这是因为React需要我们保证每次渲染时Hook的调用顺序相同</li><li>只能在 React 的函数组件和自定义的 Hook 中调用 Hook，不要在其他 JavaScript 函数中调用</li></ul><p>每次渲染时都调用<code>userEffect</code>可能会导致性能消耗，可以传入指定的props和state，仅当指定属性发生变化时才会调用effect</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`You clicked \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} times\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, [count]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 仅在 count 更改时更新</span></span></code></pre></div><p>自定义Hook指的是封装了<code>useState</code>和<code>useEffect</code>的方法，约定以<code>use</code>开头。需要注意，Hook复用的是状态逻辑而不是state，每次调用会返回新一个新的state。自定义Hook最主要的作用是：可以将组件逻辑提取到可重用的函数中。</p><ul><li>自定义 Hook 是一个函数，其名称以 “use” 开头，函数内部可以调用其他的 Hook</li><li>自定义 Hook 是一种自然遵循 Hook 设计的约定，而并不是 React 的特性。</li></ul><h2 id="状态管理" tabindex="-1">状态管理 <a class="header-anchor" href="#状态管理" aria-label="Permalink to &quot;状态管理&quot;">​</a></h2><ul><li><a href="https://www.shymean.com/article/%E7%90%86%E8%A7%A3%E6%95%B0%E6%8D%AE%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86" target="_blank" rel="noreferrer">理解数据状态管理</a></li></ul><p>如果应用比较大，可能会存在很多跨组件跨页面通信的场景，基本的prop、context和eventBus等可能导致代码难以维护和调试，</p><ul><li>prop一层层透传，难以维护</li><li>context局限于祖先组件和后代组件</li><li>eventBus需要手动订阅和解绑</li></ul><p>在这种时候，我们可能需要全局的状态管理工具。状态管理将组件与组件之间的关系解耦为数据与数据之间的关系，组件仅仅作为数据渲染的容器而已。</p><h3 id="redux" tabindex="-1">redux <a class="header-anchor" href="#redux" aria-label="Permalink to &quot;redux&quot;">​</a></h3><p>redux的使用流程：</p><ul><li>定义相关的action</li><li>实现一个reducer，并在其中根据action返回对应的state</li><li>根据reducer创建一个全局唯一的store，在UI层通过 <ul><li><code>store.subscribe</code>订阅state的变化，</li><li>通过<code>store.dispatch</code>分发action</li><li>当state变化时调用组件setState，重新render组件</li></ul></li></ul><p><a href="https://github.com/reduxjs/redux-thunk/blob/master/src/index.js" target="_blank" rel="noreferrer">redux-thunk</a>的原理是：在中间件中判断action的类型，如果是函数，则将dispatch和getState传入，并在该action中由用户手动dispatch事件枚举值；否则直接调用next</p><p><a href="https://redux-saga-in-chinese.js.org/" target="_blank" rel="noreferrer">Redux-Saga</a>使用了 ES6 的 Generator 功能，让redux中异步流程更易于读取，写入和测试</p><h3 id="mobx" tabindex="-1">Mobx <a class="header-anchor" href="#mobx" aria-label="Permalink to &quot;Mobx&quot;">​</a></h3><p>参考：</p><ul><li><a href="https://cn.mobx.js.org/intro/overview.html" target="_blank" rel="noreferrer">Mobx 文档</a></li><li><a href="https://juejin.im/post/5a7fd72c5188257a766324ae" target="_blank" rel="noreferrer">选择Redux还是Mobx</a></li></ul><p>Mobx使用简单直观的方式来完成数据的流转及数据的更新</p><h2 id="组件性能优化" tabindex="-1">组件性能优化 <a class="header-anchor" href="#组件性能优化" aria-label="Permalink to &quot;组件性能优化&quot;">​</a></h2><p>对于组件性能优化最重要的点就是减少重新 render 的次数，避免不必要的更新</p><h3 id="合并渲染" tabindex="-1">合并渲染 <a class="header-anchor" href="#合并渲染" aria-label="Permalink to &quot;合并渲染&quot;">​</a></h3><p>在UI变化中，不必立即触发每个更新，比如在极短的时间内页面状态<code>A-&gt;B-&gt;C</code>，那更新状态B就导致性能浪费。</p><p>可以说，<code>setState</code>是对单个组件的合并渲染，<code>batchedUpdates</code>是对多个组件的合并渲染。合并渲染是React最主要的优化手段，这在Fiber 源码中已经实现。</p><p>我们需要注意的是正确使用setState，理解setState合并更新的原理。</p><h3 id="代码分割" tabindex="-1">代码分割 <a class="header-anchor" href="#代码分割" aria-label="Permalink to &quot;代码分割&quot;">​</a></h3><p><code>React.lazy</code>函数能让你像渲染常规组件一样处理动态引入（的组件）,<code>Suspense</code>可以用于等待异步组件加载的展示</p><h3 id="减少渲染次数" tabindex="-1">减少渲染次数 <a class="header-anchor" href="#减少渲染次数" aria-label="Permalink to &quot;减少渲染次数&quot;">​</a></h3><p><strong>React.memo</strong></p><p>如果函数组件在给定相同 props 的情况下渲染相同的结果，那么可以通过将其包装在 <a href="https://zh-hans.reactjs.org/docs/react-api.html#reactmemo" target="_blank" rel="noreferrer">React.memo</a> 中调用</p><p><strong>shouldComponentUpdate</strong></p><p>在 shouldComponentUpdate() 中根据当前 state 或 props 判断是否需要调用render方法来重新渲染子节点。</p><p><a href="https://zh-hans.reactjs.org/docs/react-component.html#shouldcomponentupdate" target="_blank" rel="noreferrer">https://zh-hans.reactjs.org/docs/react-component.html#shouldcomponentupdate</a></p><p><strong>PureComponent</strong></p><p>React.Component 并未实现 shouldComponentUpdate()，而 React.PureComponent 中以浅层对比 prop 和 state 的方式来实现了该函数。</p><p><code>PureComponent</code>并未实现 <code>shouldComponentUpdate</code>方法，只是对props和state进行浅比较，可以结合使用<code>Immutable.js</code>来创建不可变对象，通过它来简化对象比较，提高性能。</p><h2 id="服务端渲染ssr" tabindex="-1">服务端渲染SSR <a class="header-anchor" href="#服务端渲染ssr" aria-label="Permalink to &quot;服务端渲染SSR&quot;">​</a></h2><p>参考</p><ul><li><a href="https://juejin.im/post/5d1fe6be51882579db031a6d" target="_blank" rel="noreferrer">彻底理解服务端渲染原理</a></li><li><a href="https://www.shymean.com/article/%E5%B0%86%E5%8D%9A%E5%AE%A2%E9%87%8D%E6%9E%84%E4%B8%BASSR%E6%B8%B2%E6%9F%93" target="_blank" rel="noreferrer">将博客重构为SSR渲染</a></li></ul>`,96),n=[l];function h(p,r,k,o,d,c){return a(),i("div",null,n)}const u=s(t,[["render",h]]);export{g as __pageData,u as default};
