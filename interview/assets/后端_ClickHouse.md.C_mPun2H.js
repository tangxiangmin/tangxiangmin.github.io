import{_ as s,c as a,o as i,a2 as n}from"./chunks/framework.DLPB9-dE.js";const u=JSON.parse('{"title":"搭建ClickHouse数据收集查询系统","description":"","frontmatter":{},"headers":[],"relativePath":"后端/ClickHouse.md","filePath":"后端/ClickHouse.md","lastUpdated":1683863238000}'),e={name:"后端/ClickHouse.md"},l=n(`<h1 id="搭建clickhouse数据收集查询系统" tabindex="-1">搭建ClickHouse数据收集查询系统 <a class="header-anchor" href="#搭建clickhouse数据收集查询系统" aria-label="Permalink to &quot;搭建ClickHouse数据收集查询系统&quot;">​</a></h1><p>在开发过程中，偶尔会遇见运营或者产品需要帮忙查数据的情况，本文将从产品规划、前端埋点、数据查询等方面整理相关流程</p><p>参考</p><ul><li><a href="https://clickhouse.tech/docs/zh/" target="_blank" rel="noreferrer">ClickHouse 中文文档</a></li></ul><h2 id="数据统计开发流程" tabindex="-1">数据统计开发流程 <a class="header-anchor" href="#数据统计开发流程" aria-label="Permalink to &quot;数据统计开发流程&quot;">​</a></h2><p>一般的数据统计流程如下</p><ul><li>产品提出产品需求，并确定哪些地方需要进行埋点，提供对应的埋点参数字段</li><li>前端进行业务开发，并在对应逻辑处增加数据埋点上传</li><li>业务上线后，根据对应的参数字段查询相关数据</li></ul><p>如果能实现让运营同学自己能够查询数据的话，整个效率应该会得到很大提升</p><h2 id="数据收集埋点规范" tabindex="-1">数据收集埋点规范 <a class="header-anchor" href="#数据收集埋点规范" aria-label="Permalink to &quot;数据收集埋点规范&quot;">​</a></h2><p>埋点一般需要统计的字段</p><h2 id="使用clickhouse" tabindex="-1">使用clickhouse <a class="header-anchor" href="#使用clickhouse" aria-label="Permalink to &quot;使用clickhouse&quot;">​</a></h2><h3 id="docker安装clickhouse" tabindex="-1">Docker安装clickhouse <a class="header-anchor" href="#docker安装clickhouse" aria-label="Permalink to &quot;Docker安装clickhouse&quot;">​</a></h3><p>首先使用<code>Docker</code>安装<code>clickhouse</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker pull yandex/clickhouse-client</span></span>
<span class="line"><span>docker pull yandex/clickhouse-server</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 启动服务端，暴露端口号</span></span>
<span class="line"><span>docker run -d --name clickhouse-test-server --ulimit nofile=262144:262144 -p 8123:8123 -p 9000:9000 -p 9009:9009 yandex/clickhouse-server</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 启动客户端</span></span>
<span class="line"><span>docker run -it --rm --link clickhouse-test-server:clickhouse-server yandex/clickhouse-client --host clickhouse-server</span></span></code></pre></div><p>使用client连接服务器后，就可以进行数据库操作了</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 查看所有数据库</span></span>
<span class="line"><span>show databases;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 创建数据库</span></span>
<span class="line"><span>create database shymean;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 切换到数据库</span></span>
<span class="line"><span>use shymean;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 创建表</span></span>
<span class="line"><span>CREATE TABLE test( id UInt16,col1 String,col2 String,create_date date ) ENGINE = MergeTree(create_date, (id), 8192);</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 向表中插入数据</span></span>
<span class="line"><span>INSERT INTO shymean.test (col1, col2) VALUES (&#39;hello&#39;, &#39;test insert&#39;);</span></span></code></pre></div><h3 id="nodejs连接clickhouse" tabindex="-1">NodeJS连接clickhouse <a class="header-anchor" href="#nodejs连接clickhouse" aria-label="Permalink to &quot;NodeJS连接clickhouse&quot;">​</a></h3><p>使用<a href="https://www.npmjs.com/package/clickhouse" target="_blank" rel="noreferrer">clickhouse</a>这个npm包</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ClickHouse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;clickhouse&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> clickhouse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClickHouse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用前面暴露的端口号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    debug: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    basicAuth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    isUseGzip: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    format: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;json&quot; || &quot;csv&quot; || &quot;tsv&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        session_id                              : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;session_id if neeed&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        session_timeout                         : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        output_format_json_quote_64bit_integers : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        enable_http_compression                 : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        database                                : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;shymean&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">clickhouse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`SELECT * FROM shymean.test LIMIT 10\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rows) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查看到对应数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>这样就可以起一个服务用于收集前端提交的打点数据等</p><h3 id="clickhouse网页客户端" tabindex="-1">clickhouse网页客户端 <a class="header-anchor" href="#clickhouse网页客户端" aria-label="Permalink to &quot;clickhouse网页客户端&quot;">​</a></h3><p>参考：<a href="https://clickhouse.tech/docs/zh/interfaces/third-party/gui/" target="_blank" rel="noreferrer">第三方开发的可视化界面</a></p><p>尝试了一下<a href="https://github.com/tabixio/tabix" target="_blank" rel="noreferrer">tabix</a>，使用起来比较方便</p><p><img src="http://img.shymean.com/oPic/1595856506953_475.png" alt=""></p><p>这种可视化的客户端可以方便运营和数据分析等同事自己查询数据，不再需要开发介入（或者是开发直接写好SQL语句）；对于复杂查询或者需要同时查询业务数据库的情况，可以封装成接口调用。</p>`,25),p=[l];function h(t,k,c,r,o,E){return i(),a("div",null,p)}const g=s(e,[["render",h]]);export{u as __pageData,g as default};
